{"version":3,"sources":["webpack://pi/./src/maths/algebra/equation.ts","webpack://pi/./src/maths/algebra/linearSystem.ts","webpack://pi/./src/maths/algebra/logicalset.ts","webpack://pi/./src/maths/algebra/monom.ts","webpack://pi/./src/maths/algebra/polynom.ts","webpack://pi/./src/maths/algebra/rational.ts","webpack://pi/./src/maths/coefficients/fraction.ts","webpack://pi/./src/maths/coefficients/nthroot.ts","webpack://pi/./src/maths/geometry/line.ts","webpack://pi/./src/maths/geometry/point.ts","webpack://pi/./src/maths/geometry/triangle.ts","webpack://pi/./src/maths/geometry/vector.ts","webpack://pi/./src/maths/numeric.ts","webpack://pi/./src/maths/shutingyard.ts","webpack://pi/webpack/bootstrap","webpack://pi/./src/main.ts"],"names":["Equation","constructor","equations","_varnothing","_real","parse","equationString","pStr","strSign","this","_findSign","split","create","Polynom","_formatSign","console","log","includes","signStr","undefined","_reverseSign","_sign","replace","left","right","sign","_left","_right","clone","_randomizeDefaults","degree","randomize","opts","reorder","allLeft","subtract","zero","mMove","m","monoms","simplify","multiply","Numeric","lcm","getDenominators","divide","gcd","getNumerators","isolate","letter","isMultiVariable","cMove","hasLetter","add","opposed","length","coefficient","value","F","Fraction","isZero","invert","Math","max","letters","Set","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","indexOf","isStrictEqual","isAlsoEqual","m1","monomByDegree","m0","v","display","s","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","denominator","a","b","sqrt","toFixed","Nthroot","reduce","hasRadical","tex","dfrac","isEquation","isPolynom","join","signAsTex","raw","variables","concat","LinearSystem","equationStrings","_equations","map","_findLetters","setCoefficient","coefficients","i","_letters","slice","toString","equ","push","setLetters","generate","solutions","solutionsF","_generateOneEquation","coeff","leftValue","equString","randomIntSym","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","V","sort","_solveOneLetter","str","equStr","LS","equArray","L","monomByLetter","repeat","isReal","isVarnothing","_linearReduction","c1","c2","LE","reducedEquations","_rpn","Shutingyard","rpn","_rawString","evaluate","tokenSets","reference","varStack","referenceSet","key","token","tokenType","second","pop","first","filter","x","has","vennAB","A","B","vennABC","C","Monom","inputStr","literalStr","_coefficient","trim","k","_literal","setLetter","one","clean","random","withFraction","allowZero","randomInt","M","isSameAs","literal","multiplyByNumber","pow","nb","root","p","isSquare","compare","isEqual","M1","M2","K","item","isLitteralSquare","Number","isSafeInteger","Object","values","t","n","r","derivative","d","dM","areSameAs","areEquals","matchAll","keys","numerator","dividers","abs","litterals","_getLitteralDividers","monomDividers","N","arr","tmpList","litt","currentLetter","isOne","coeffN","coeffD","min","xmultiply","polynomString","genDisplay","output","forceSign","wrapParentheses","P","_monoms","isNaN","empty","shutingYardToReducedPolynom","test","fractions","m2","tempPolynom","stack","previousToken","element","unit","factorable","allowNullMonom","numberOfMonoms","config","rndSimple","splice","rndFactorable","_factors","factorUnit","isMonom","multiplyByPolynom","isFraction","multiplyByFraction","multiplyByMonom","multiplyByInteger","euclidian","quotient","reminder","maxMP","degreeP","newM","MaxIteration","divideByFraction","divideByInteger","nbF","cP1","cP2","isOpposedAt","isFactorized","match","e","polynomStringNormalized","replaceAll","polynomStringReduced","factors","substr","polyFactors","factorize","f","j","S","replaceBy","resultPolynom","forEach","monom","dP","factorize_OLD","maxValue","nbFactorsFound","commonMonom","commonPolynom","Q","securityLoop","m1d","m2d","result","dividerPolynom","_factorize2ndDegree","P1","P2","c","x1","x2","factor","numberOfVars","isPositive","xyzPolynom","xFactors","literalSqrt","_factorizeByGroups","getZeroes","zeroes","zeroesAsTex","D","z","frac","monomsByDegree","Ms","denominators","numerators","lcmDenominator","gcdDenominator","lcmNumerator","gcdNumerator","makeItComplicate","complexity","_texString","mDegree","factorizePartial","texString","mMain","mCheck","mFactor","pFactor","g","minify","canDivide","evalValue","_numerator","_denominator","domain","amplify","NumeratorEuclidien","DenominatorEuclidien","R","texFactors","denominatorOrPeriodic","NaN","floor","infinite","Infinity","invalid","lesser","than","leq","greater","geq","isDifferent","isOpposed","isInverted","isNegative","isInfinity","isFinite","isReduced","radical","nthroot","_nth","_radical","_isValid","Line","_exists","parseByCoefficient","isPoint","isVector","parseByPointAndVector","Vector","isLine","elem","delete","size","_a","_b","_c","_d","_OA","Point","_n","normal","y","isParellelTo","line","slope","height","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","canonical","equation","mxh","OA","parametric","pmatrix","distanceTo","pt","d2","normSquare","fraction","hitSegment","iPt","canonicalAsFloatCoefficient","decimals","_x","_y","origin","middleOf","texValues","numberOfDigits","pts","_lines","intersect","_B","_C","_A","isTriangle","_updateTriangle","AB","BC","AC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","remarquables","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","lines","b1","norm","b2","isNormalTo","_parseString","reset","components","scalarProductWithVector","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","scalarProduct","v1","v2","round","primes","maxV","gcd2","percent","randomBool","number","shuffleArray","randomArray","temp","mode","_mode","tokenConfigInitialization","isOperation","_tokenConfig","precedence","associative","_uniformize","NextToken2","expr","start","NextToken","tokenMatch","Uniformizer","expr2","fnToken","RegExp","operators","outQueue","opStack","tokenPos","previousOpStatckLength","securityLoopLvl2","securityLoopLvl1","opTop","reverse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","window","Pi","ShutingYard","Root","Rational","Logicalset","Geometry","Triangle"],"mappings":"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","file":"pi.js","sourcesContent":["import {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Nthroot} from \"../coefficients/nthroot\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\nimport {Vector} from \"../geometry/vector\";\r\nimport lookupFiles = Mocha.utils.lookupFiles;\r\n\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equation Equation string\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this;\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param F\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","import {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"./equation\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\n\r\n\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if(equationStrings!==undefined && equationStrings.length>0){\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    get isLinerarSystem(){return true; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {return this._letters.join('')}\r\n\r\n    set letters(value:string){this._letters = value.split('');}\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters:string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for(let equ of this._equations){\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Numeric.randomIntSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any):Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Logicalset\r\n */\r\n\r\nimport {Shutingyard} from '../shutingyard';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Logicalset {\r\n    private _rawString: string;\r\n    private _rpn: { token: string, tokenType: string }[]\r\n\r\n    /**\r\n     *\r\n     * @param {string} value (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(value: string) {\r\n        this._rawString = value\r\n        this.parse(value)\r\n        return this;\r\n    }\r\n\r\n    get isLogicalset() {\r\n        return true;\r\n    };\r\n\r\n    private parse = (value: string): Logicalset => {\r\n        // TODO: Must format the value string to convert some items...\r\n\r\n        // Parse the updated value to the shutingyard algorithm\r\n        this._rpn = new Shutingyard('set').parse(value).rpn;\r\n\r\n        return this;\r\n    }\r\n\r\n    evaluate(tokenSets: { [key: string]: any[] }, reference?: any[]): any[] {\r\n        let varStack: (Set<unknown>)[] = []\r\n\r\n        let referenceSet: Set<unknown> = new Set()\r\n        if (reference === undefined) {\r\n            referenceSet = new Set()\r\n            for (let key in tokenSets) {\r\n                referenceSet = new Set([...referenceSet, ...tokenSets[key]])\r\n            }\r\n        } else {\r\n            referenceSet = new Set(reference)\r\n        }\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                // The variable has no token - assume it's empty.\r\n                if (tokenSets[token.token] === undefined) {\r\n                    varStack.push(new Set())\r\n                } else {\r\n                    varStack.push(new Set(tokenSets[token.token]));\r\n                }\r\n\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...first].filter(x => second.has(x))))\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first, ...second]))\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n                            varStack.push(new Set([...first].filter(x => !second.has(x))))\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n\r\n                            varStack.push(new Set([...referenceSet].filter(x => !first.has(x))))\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return [...varStack[0]].sort();\r\n    }\r\n\r\n    vennAB(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB'],\r\n                B: ['B', 'AB']\r\n            },\r\n            ['A', 'B', 'AB', 'E']\r\n        )\r\n    }\r\n\r\n    vennABC(): any[] {\r\n        return this.evaluate({\r\n                A: ['A', 'AB', 'AC', 'ABC'],\r\n                B: ['B', 'AB', 'BC', 'ABC'],\r\n                C: ['C', 'AC', 'BC', 'ABC']\r\n            },\r\n            ['A', 'B', 'C', 'AB', 'AC', 'BC', 'E']\r\n        )\r\n    }\r\n\r\n    get rpn(): { token: string, tokenType: string }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    get tex(): string {\r\n        let varStack: { token:string, tokenType: string } [] = []\r\n\r\n        for (let token of this._rpn) {\r\n            if (token.tokenType === 'variable') {\r\n                varStack.push(token);\r\n            } else {\r\n                switch (token.token) {\r\n                    case '&':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cap ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '|':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\cup ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '-':\r\n                        if (varStack.length >= 2) {\r\n                            let second = varStack.pop(),\r\n                                first = varStack.pop()\r\n\r\n                            if(first.tokenType==='mix'){first.token = `( ${first.token} )`}\r\n                            if(second.tokenType==='mix'){second.token = `( ${second.token} )`}\r\n                            varStack.push({token: `${first.token} \\\\setminus ${second.token}`, tokenType: 'mix'})\r\n                        }\r\n                        break\r\n                    case '!':\r\n                        if (varStack.length >= 1) {\r\n                            let first = varStack.pop()\r\n                            varStack.push({token: `\\\\overline{ ${first.token} }`, tokenType: 'variable'})\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n\r\n        return varStack[0].token\r\n    }\r\n}\r\n","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\nimport lookupFiles = Mocha.utils.lookupFiles;\r\n\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    get literalSqrt(): { [Key: string]: number } {\r\n\r\n        if (this.isLitteralSquare()) {\r\n            let L: { [Key: string]: number } = {}\r\n            for (let key in this._literal) {\r\n                L[key] = this._literal[key] / 2\r\n            }\r\n            return L;\r\n        } else {\r\n            return this._literal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    get dividers(): Monom[] {\r\n        // Decompose only if the coefficient it a complet value\r\n        if (this.coefficient.denominator !== 1) {\r\n            return [this.clone()]\r\n        }\r\n\r\n        // Security : do not do this if greater than 10000\r\n        if (this.coefficient.numerator > 10000) {\r\n            return [this.clone()]\r\n        }\r\n        const dividers = Numeric.dividers(Math.abs(this.coefficient.numerator))\r\n\r\n        // Decompose the litterals parts.\r\n        let litterals: { [key: string]: number }[] = [];\r\n        for (let L in this.literal) {\r\n            // L is the letter.\r\n            litterals = this._getLitteralDividers(litterals, L)\r\n        }\r\n\r\n        const monomDividers: Monom[] = [];\r\n        if (litterals.length > 0 && dividers.length>0) {\r\n            for (let N of dividers) {\r\n                for (let L of litterals) {\r\n                    let M = new Monom();\r\n                    M.coefficient = new Fraction(N)\r\n                    M.literal = L\r\n                    monomDividers.push(M)\r\n                }\r\n            }\r\n        }else if (dividers.length===0) {\r\n            for (let L of litterals) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction().one()\r\n                M.literal = L\r\n                monomDividers.push(M)\r\n            }\r\n        } else {\r\n            for (let N of dividers) {\r\n                let M = new Monom();\r\n                M.coefficient = new Fraction(N)\r\n                monomDividers.push(M)\r\n            }\r\n        }\r\n\r\n        return monomDividers.length===0? [new Monom().one()]: monomDividers;\r\n    }\r\n\r\n    private _getLitteralDividers(arr: { [key: string]: number }[], letter: string): { [key: string]: number }[] {\r\n        let tmpList: { [key: string]: number }[] = [];\r\n\r\n        for (let d = 0; d <= this.literal[letter]; d++) {\r\n            if (arr.length === 0) {\r\n                let litt: { [key: string]: number } = {}\r\n                litt[letter] = d\r\n                tmpList.push(litt)\r\n            } else {\r\n                for (let item of arr) {\r\n                    let litt: { [key: string]: number } = {}\r\n                    for(let currentLetter in item){\r\n                        litt[currentLetter] = item[currentLetter]\r\n                    }\r\n                    litt[letter] = d\r\n                    tmpList.push(litt)\r\n                }\r\n            }\r\n        }\r\n        return tmpList;\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Generate a random monom\r\n     * @param letters       Letters to use, as a string\r\n     * @param degree        Max degree (default 1)\r\n     * @param withFraction  Allows fraction as coefficient (default false)\r\n     * @param allowZero     Allows null monom (default false)\r\n     */\r\n    random = (letters: string = 'x', degree: number = 1, withFraction: boolean = false, allowZero: boolean = false): Monom => {\r\n        // TODO: Randomize monoms: options or make it subclass ?\r\n        this.coefficient.parse(Numeric.randomIntSym(10, allowZero), (withFraction) ? Numeric.randomInt(1, 10) : 1);\r\n\r\n        for (let L of letters.split('')) {\r\n            this.setLetter(L, (letters.length > 1) ? Numeric.randomInt(degree) : degree);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiplyByNumber = (F: Fraction | number): Monom => {\r\n        this._coefficient.multiply(F);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        if (this.isSquare()) {\r\n            this._coefficient.sqrt();\r\n            for (let letter in this._literal) {\r\n                this._literal[letter] /= 2;\r\n            }\r\n        }\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    isSquare = (): boolean => {\r\n        if (!this.coefficient.isSquare()) {\r\n            return false;\r\n        }\r\n        return this.isLitteralSquare();\r\n    }\r\n\r\n    isLitteralSquare = (): boolean => {\r\n        for (let letter in this.literal) {\r\n            if (this.literal[letter] % 2 !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction }): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        for (let L in this._literal) {\r\n            if (values[L] === undefined) {\r\n                return new Fraction().zero();\r\n            }\r\n            r.multiply(values[L].clone().pow(this._literal[L]));\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param M1\r\n     * @param M2\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from '../coefficients/fraction';\r\nimport {AST} from \"eslint\";\r\nimport TokenType = AST.TokenType;\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this.factorize()\r\n\r\n        let tex = ''\r\n        for (let f of this.factors) {\r\n            if (f.monoms.length > 1) {\r\n                tex += `(${f.tex})`\r\n            } else {\r\n                tex = f.tex + tex;\r\n            }\r\n        }\r\n        return tex;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: { token: string, tokenType: string }[] = SY.rpn;\r\n        const m: Polynom[] = [];\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n        let tokenParam: number = null;\r\n\r\n        let stack:Polynom[] = [],\r\n            previousToken: string = null,\r\n            tempPolynom\r\n        for(const element of rpn){\r\n            if(element.tokenType==='coefficient' || element.tokenType==='variable'){\r\n                tempPolynom = new Polynom().zero();\r\n                tempPolynom.monoms = [new Monom(element.token)]\r\n                stack.push(tempPolynom.clone())\r\n            }else if(element.tokenType==='operation'){\r\n                m2 = (stack.pop()) || new Polynom().zero();\r\n                m1 = (stack.pop()) || new Polynom().zero();\r\n                switch (element.token){\r\n                    case '+':\r\n                        stack.push(m1.add(m2))\r\n                        break;\r\n                    case '-':\r\n                        stack.push(m1.subtract(m2))\r\n                        break;\r\n                    case '*':\r\n                        stack.push(m1.multiply(m2))\r\n                        break;\r\n                    case '^':\r\n                        stack.push(m1.pow(+previousToken))\r\n                }\r\n            }\r\n            previousToken = element.token;\r\n        }\r\n\r\n        this._monoms = stack[0].monoms;\r\n        return this;\r\n        // for (const token of rpn) {\r\n        //     console.log(token)\r\n        //\r\n        //     if (token.tokenType==='operation') {\r\n        //         // Polynom\r\n        //         m2 = (m.pop()) || new Polynom().zero();\r\n        //\r\n        //         if (token.token !== '^') {\r\n        //             if (m.length > 0) {\r\n        //                 // Get the first item from the stack\r\n        //                 m1 = (m.pop()) || new Polynom().zero();\r\n        //             } else {\r\n        //                 // Nothing is in the stack - create an empty polynom\r\n        //                 m1 = new Polynom().zero();\r\n        //             }\r\n        //         } else {\r\n        //             // tokenParam = parseInt(token.split('^')[1]);\r\n        //             tokenParam = Number(token.token.substr(1));\r\n        //             // m2.clone().pow(tokenParam);\r\n        //         }\r\n        //\r\n        //\r\n        //         switch (token.token) {\r\n        //             case '+':\r\n        //                 m1.add(m2);\r\n        //                 break;\r\n        //             case '-':\r\n        //                 m1.subtract(m2);\r\n        //                 break;\r\n        //             case '*':\r\n        //                 m1.multiply(m2);\r\n        //                 break;\r\n        //             // TODO: Shuting yard to polynom divide.\r\n        //             // case '/': console.log(m1.display, m2.display);m1.divide(m2); break;\r\n        //             // By default, all not operation value are converted to polynom. Therefore, the pow value must be converted to an integer.\r\n        //             // TODO: Shuting yard to polynom pow : case '^': m1.pow(+m2.monoms[0].coefficient.numerator); break;\r\n        //             default:\r\n        //                 if (tokenParam !== null) {\r\n        //                     if (token.token[0] === '^') {\r\n        //                         m1 = m2.clone().pow(tokenParam);\r\n        //                     }\r\n        //                 } else {\r\n        //                     console.log('Token not recognized in shuting yard to reduce polynom: ', token);\r\n        //                 }\r\n        //         }\r\n        //         m.push(m1);\r\n        //     } else {\r\n        //         // console.log('NOT OPERATION: ', token, new Monom(token).tex)\r\n        //         m.push(new Polynom().add(new Monom(token.token)));\r\n        //     }\r\n        // }\r\n        //\r\n        // this._monoms = m[0].monoms;\r\n        // return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n\r\n    // TODO: Remove rndSimple and rndFactorable.\r\n    /**\r\n     * Polynom generator\r\n     * @param degree\r\n     * @param unit\r\n     * @param withFraction\r\n     * @param letters\r\n     * @param allowZero\r\n     * @param numberOfMonoms\r\n     */\r\n    rndSimple = (degree: number = 1, unit: boolean = false, withFraction: boolean = false, letters: string = 'x', allowZero: boolean = true, numberOfMonoms: number = -1): Polynom => {\r\n        // TODO: Make rndSimple polynom generator more user friendly\r\n        // If the current polynom (this) is already created, initialise it!\r\n        this.empty();\r\n\r\n        let M: Monom;\r\n        for (let i = degree; i >= 0; i--) {\r\n            M = new Monom().random(letters, i, withFraction, (i === degree) ? false : allowZero);\r\n\r\n            // We want to have the greatest degree monom coefficient to be unit.\r\n            if (unit && i === degree) {\r\n                M.coefficient = new Fraction().one();\r\n            }\r\n            this.add(M);\r\n        }\r\n\r\n        // Remove randomly the monoms to match the number of monoms.\r\n        if (numberOfMonoms > 0 && numberOfMonoms < this.length) {\r\n            this.reorder();\r\n            // Keep the greatest degree monom.\r\n            // But remove randomly the next monoms.\r\n            while (this.length > numberOfMonoms) {\r\n                this._monoms.splice(Numeric.randomInt(1, this.length - 1), 1);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = new Polynom().rndSimple(1, factorUnit, false, letters);\r\n\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const letter: string = P.variables[0];\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone().reorder(letter);\r\n\r\n        // There is no variable !\r\n        if (P.variables.length === 0) {\r\n            return {quotient, reminder}\r\n        }\r\n\r\n        // Get at least a letter\r\n\r\n        const maxMP: Monom = P.monomByDegree(undefined, letter);\r\n        const degreeP: number = P.degree(letter);\r\n\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        let MaxIteration = this.degree(letter) * 2;\r\n        while (reminder.degree(letter) >= degreeP && MaxIteration >= 0) {\r\n            // console.log('EUCLIDE Q', quotient.degree(letter), quotient.tex)\r\n            // console.log('EUCLIDE R', reminder.degree(letter), reminder.tex)\r\n            // console.log('ITERATION', MaxIteration)\r\n            MaxIteration--\r\n\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree(undefined, letter).clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P;\r\n\r\n        // Try to build the polynom\r\n        try {\r\n            P = new Polynom(polynomString);\r\n            // Check if polynom is omplete...\r\n            if(polynomString.match(/\\(/g).length!==polynomString.match(/\\)/g).length){return false}\r\n        }catch (e){\r\n            return false;\r\n        }\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1, maxNumberOfIteration = polyFactors.length * 2;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction }): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n        return dP;\r\n\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize_OLD = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    factorize = (letter?: string): Polynom[] => {\r\n        let factors: Polynom[] = [];\r\n\r\n        // Extract the common monom\r\n        let P = this.clone().reorder(),\r\n            M = P.commonMonom(),\r\n            tempPolynom: Polynom\r\n        // It has a common monom.\r\n        if (!M.isOne()) {\r\n            tempPolynom = new Polynom()\r\n            tempPolynom.monoms = [M]\r\n            factors = [tempPolynom.clone()]\r\n            P = P.euclidian(tempPolynom).quotient;\r\n        }\r\n\r\n        let securityLoop = P.degree() * 2\r\n        // securityLoop = 0\r\n        while (securityLoop >= 0) {\r\n            securityLoop--\r\n\r\n\r\n            if (P.monoms.length < 2) {\r\n                if (!P.isOne()) {\r\n                    factors.push(P.clone());\r\n                }\r\n                break;\r\n            } else {\r\n                // Get the first and last monom.\r\n                let m1 = P.monoms[0].dividers,\r\n                    m2 = P.monoms[P.monoms.length - 1].dividers\r\n\r\n                // console.log('CURRENT VALUE')\r\n                // console.log(P.tex)\r\n                // console.log('---------------------')\r\n                for (let m1d of m1) {\r\n                    for (let m2d of m2) {\r\n                        // if(m1d.degree()===m2d.degree()){continue}\r\n                        let dividerPolynom = new Polynom(),\r\n                            result\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone()]\r\n                        result = P.euclidian(dividerPolynom)\r\n\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex, '|||||', result.quotient.tex)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                            continue;\r\n                        }\r\n\r\n                        dividerPolynom.monoms = [m1d.clone(), m2d.clone().opposed()]\r\n                        result = P.euclidian(dividerPolynom)\r\n                        if (result.reminder.isZero()) {\r\n                            P = result.quotient.clone();\r\n                            factors.push(dividerPolynom)\r\n                        }\r\n                        // console.log(dividerPolynom.tex, '=>', result.reminder.tex)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.factors = factors\r\n        return factors;\r\n        // let securityLoop = P.degree() * 2;\r\n        // while (P.degree(letter) >= 2 && securityLoop >= 0) {\r\n        //     // Avoid infinite looping\r\n        //     securityLoop--;\r\n        //\r\n        //     console.log(letter, P.degree(letter))\r\n        //     if (P.degree(letter) === 1) {\r\n        //         factors.push(P.clone())\r\n        //         // We are done !\r\n        //         return factors;\r\n        //\r\n        //     } else if (P.degree(letter) === 2) {\r\n        //         if(P.monoms.length===3) {\r\n        //             // Resolve using delta.\r\n        //             factors = [...factors, ...P._factorize2ndDegree(letter)];\r\n        //             // We are done !\r\n        //             return factors;\r\n        //         }else if(P.degree(letter)===2 && P.monoms.length===4) {\r\n        //             // Resolve using groups\r\n        //             factors = [...factors, ...P._factorizeByGroups()]\r\n        //         }\r\n        //\r\n        //     }else {\r\n        //         console.log('NOTHING TO DO: ', this.tex)\r\n        //     }\r\n        //\r\n        // }\r\n\r\n\r\n        return [];\r\n    }\r\n\r\n    private _factorize2ndDegree = (letter: string): Polynom[] => {\r\n        let P1: Polynom, P2: Polynom,\r\n            a, b, c, delta, x1, x2, factor;\r\n\r\n        // One variable only\r\n        if (this.numberOfVars === 1) {\r\n            a = this.monomByDegree(2, letter).coefficient;\r\n            b = this.monomByDegree(1, letter).coefficient;\r\n            c = this.monomByDegree(0, letter).coefficient;\r\n            delta = b.clone().pow(2).subtract(a.clone().multiply(c).multiply(4));\r\n\r\n            if (delta.isZero()) {\r\n                x1 = b.clone().opposed().divide(a.clone().multiply(2))\r\n                P1 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                P2 = new Polynom(letter).subtract(x1.display).multiply(x1.denominator)\r\n                factor = a.divide(x1.denominator).divide(x1.denominator);\r\n\r\n                if (!factor.isOne()) {\r\n                    // TODO: Update new Polynom to accept anything...\r\n                    return [new Polynom(factor.display), P1, P2]\r\n                } else {\r\n                    return [P1, P2]\r\n                }\r\n            } else if (delta.isPositive() && delta.isSquare()) {\r\n                x1 = b.clone().opposed()\r\n                    .add(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n                x2 = b.clone().opposed()\r\n                    .subtract(delta.clone().sqrt())\r\n                    .divide(a.clone().multiply(2))\r\n\r\n                // (2x+5)(3x-2)\r\n                // 6x^2+11x-10\r\n                // a = 6, b = 11, c = -10\r\n                // delta = 121-4*6*(-10) = 361= 19^2\r\n                // x1 = (-11 + 19)  / 12 = 8/12 = 2/3\r\n                // x2 = (-11 - 19)  / 12 = -30/12 = -5/2\r\n                factor = a.divide(x1.denominator).divide(x2.denominator);\r\n                if (factor.isOne()) {\r\n                    return [\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n                } else {\r\n                    return [\r\n                        new Polynom(factor.display),\r\n                        new Polynom(letter).subtract(x1.display).multiply(x1.denominator),\r\n                        new Polynom(letter).subtract(x2.display).multiply(x2.denominator),\r\n                    ]\r\n\r\n                }\r\n            } else {\r\n                // No solution possible - return the complete value.\r\n                return [this.clone()]\r\n            }\r\n        } else {\r\n            // If multiple variables, only handle perfect squares...\r\n            a = this.monomByDegree(2, letter);\r\n            b = this.monomByDegree(1, letter);\r\n            c = this.monomByDegree(0, letter);\r\n\r\n\r\n            if (a.isLitteralSquare() && c.isLitteralSquare()) {\r\n                // Check the middle item is same as...\r\n                if (b.clone().pow(2).isSameAs(a.clone().multiply(c))) {\r\n                    // Determine if the coefficient values matches.\r\n\r\n                    // Search 4 values (r, s, t, u) that matches:\r\n                    // (r X + s Y)(t X + u Y) = rt X^2 + (ru + st) XY + su Y^2\r\n\r\n                    let xPolynom = new Polynom('x', a.coefficient, b.coefficient, c.coefficient);\r\n                    let xFactors = xPolynom._factorize2ndDegree('x');\r\n\r\n                    let factors = [], xyzPolynom: Polynom;\r\n\r\n                    if (xFactors.length >= 2) {\r\n                        for (let p of xFactors) {\r\n                            if (p.degree() === 0) {\r\n                                factors.push(p.clone())\r\n                            } else {\r\n                                xyzPolynom = p.clone();\r\n                                xyzPolynom.monoms[0].literal = a.literalSqrt\r\n                                xyzPolynom.monoms[1].literal = c.literalSqrt\r\n                                factors.push(xyzPolynom.clone())\r\n                            }\r\n                        }\r\n                        return factors\r\n                    }\r\n                }\r\n            }\r\n\r\n            return [this.clone()]\r\n            //\r\n            // console.log(a.tex, b.tex, c.tex)\r\n            // if (a.isSquare() && c.isSquare()) {\r\n            //     console.log('A C squares')\r\n            //     if (a.clone().sqrt().multiply(c.clone().sqrt()).multiplyByNumber(2).isSameAs(b)) {\r\n            //         console.log('HERE')\r\n            //         if (a.coefficient.sign() === b.coefficient.sign()) {\r\n            //             return []\r\n            //         }else{\r\n            //             return []\r\n            //         }\r\n            //     }\r\n            // } else if(a.isLitteralSquare() && c.isLitteralSquare()) {\r\n            //     console.log('A C litteral SQUARES')\r\n            //     // Check that the middle element is the product of a and c.\r\n            //\r\n            //     if(b.clone().pow(2).isSameAs(a.clone().multiply(c))){\r\n            //         console.log('SAME')\r\n            //\r\n            //     }else{\r\n            //         console.log('NOT SAME')\r\n            //     }\r\n            //\r\n            //     return [this.clone()]\r\n            // } else {\r\n            //     console.log('NOT SQUARES AT ALL !!!!')\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private _factorizeByGroups = (): Polynom[] => {\r\n        // TODO: Factorize by groups.\r\n        return [];\r\n    }\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter), letter);\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    monomsByDegree = (degree?: number, letter?: string): Monom[] => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomsByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        let Ms: Monom[] = [];\r\n\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                Ms.push(m.clone())\r\n            }\r\n        }\r\n\r\n        return Ms\r\n        // Nothing was found - retur\r\n    }\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        const mDegree = Numeric.randomInt(0, this.degree() - 1);\r\n        const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        C.factorizePartial(true);\r\n        this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","/**\r\n * Rational polynom module contains everything necessary to handle rational polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param numerator\r\n     * @param denominator\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n    clone = (): Rational => {\r\n        this._numerator = this._numerator.clone()\r\n        this._denominator = this._denominator.clone()\r\n\r\n        return this;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n\r\n    get texFactors(): string {\r\n        this._numerator.factorize()\r\n        this._denominator.factorize()\r\n\r\n        return `\\\\dfrac{ ${this._numerator.texFactors} }{ ${this._denominator.texFactors} }`\r\n    }\r\n\r\n    get numerator(): Polynom {\r\n        return this._numerator\r\n    }\r\n    get denominator(): Polynom {\r\n        return this._denominator\r\n    }\r\n\r\n    domain = (): string => {\r\n        let zeroes = this._denominator.getZeroes();\r\n        if( zeroes.length===0 || zeroes[0]===false){\r\n            return '\\\\mathbb{R}'\r\n        }else if(zeroes[0]===true){\r\n            return '\\\\varnothing'\r\n        }else{\r\n            return '\\\\mathbb{R}\\\\setminus\\\\left{'+\r\n                zeroes.map(x=> {\r\n                    return (typeof x === 'boolean')?'':x.frac\r\n                    })\r\n                    .join(';')+'\\\\right}'\r\n        }\r\n    }\r\n\r\n    amplify = (P: Polynom): Rational => {\r\n        this._numerator.multiply(P);\r\n        this._denominator.multiply(P);\r\n\r\n        return this;\r\n    }\r\n\r\n    simplify = (P: Polynom): Rational => {\r\n        let NumeratorEuclidien = this._numerator.euclidian(P);\r\n        if(!NumeratorEuclidien.reminder.isZero()){return this;}\r\n\r\n        let DenominatorEuclidien = this._denominator.euclidian(P);\r\n        if(!DenominatorEuclidien.reminder.isZero()){return this;}\r\n\r\n        this._numerator = NumeratorEuclidien.quotient;\r\n        this._denominator = DenominatorEuclidien.quotient;\r\n        return this;\r\n    }\r\n\r\n    reduce = (): Rational => {\r\n        console.log(this._numerator.tex)\r\n        this._numerator.factorize();\r\n        console.log(this._numerator.factors.map(x => x.tex))\r\n        for(let f of this._numerator.factors){\r\n            this.simplify(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    opposed = (): Rational => {\r\n        this._numerator.opposed();\r\n        return this;\r\n    }\r\n    add = (R: Rational): Rational => {\r\n        // 1. Make sure both rational are at the same denominator\r\n        // 2. Add the numerators.\r\n        // 3. Simplify\r\n\r\n        // Store the adding denominator\r\n        let denominator = this._denominator.clone()\r\n\r\n        // Amplif the main rational polynom by the adding denominator\r\n        this.amplify(R._denominator)\r\n\r\n        // Add to the numerator the adding value...\r\n        this._numerator.add(R._numerator.clone().multiply(denominator));\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (R: Rational): Rational => {\r\n        return this.add(R.clone().opposed())\r\n    }\r\n}","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null) {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    isReduced = (): boolean => {\r\n        return Math.abs(Numeric.gcd(this._numerator, this._denominator))===1\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            if (values[0].isPoint) {\r\n                return values.clone();\r\n            }\r\n\r\n            // Value given as a dictionnary\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        let V = new Point();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(Math.abs(value));\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<=maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n\r\n        // Make sure the array of value is unique.\r\n        return [...new Set(D)];\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return Numeric.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return Numeric.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return Numeric.randomInt(-max, max);\r\n        }\r\n    }\r\n\r\n    static randomArray(arr: any[], number?:number):any[]{\r\n        if(number===undefined){number = 1}\r\n\r\n        // Return a clone array\r\n        if(arr.length<=0){return Object.values(arr)}\r\n\r\n        // Randomize the array and return the n first elements.\r\n        return this.shuffleArray(arr).slice(0,number);\r\n    }\r\n\r\n    static randomItem(arr: any[]): any{\r\n        if(arr.length===0){return ''}\r\n        return this.randomArray(arr, 1)[0]\r\n    }\r\n\r\n    static shuffleArray(arr: any[]): any[] {\r\n        // The Fisher-Yates algorithm\r\n        let shuffleArray = Object.values(arr)\r\n        for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = shuffleArray[i];\r\n            shuffleArray[i] = shuffleArray[j];\r\n            shuffleArray[j] = temp;\r\n        }\r\n\r\n        return shuffleArray;\r\n    }\r\n}","type tokenType = {\r\n    [key: string]: {\r\n        precedence: number,\r\n        associative: string\r\n    }\r\n}\r\n\r\nexport class Shutingyard {\r\n    private _rpn: { token: string, tokenType: string }[] = [];\r\n    private _mode: 'polynom' | 'set';\r\n    private _tokenConfig: tokenType;\r\n    private _uniformize: boolean;\r\n\r\n    constructor(mode?: 'polynom' | 'set') {\r\n        this._mode = typeof mode === 'undefined' ? 'polynom' : mode;\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        //\r\n        // if (token.match(/^sin|cos|tan/g)) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === 'set') {\r\n            this._tokenConfig = {\r\n                '&': {precedence: 3, associative: 'left'},\r\n                '|': {precedence: 3, associative: 'left'},\r\n                '!': {precedence: 4, associative: 'right'},\r\n                '-': {precedence: 2, associative: 'left'}\r\n            }\r\n            this._uniformize = false;\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': {precedence: 4, associative: 'right'},\r\n                '*': {precedence: 3, associative: 'left'},\r\n                '/': {precedence: 3, associative: 'left'},\r\n                '+': {precedence: 2, associative: 'left'},\r\n                '-': {precedence: 2, associative: 'left'},\r\n                '%': {precedence: 3, associative: 'right'},\r\n                'sin': {precedence: 4, associative: 'right'},\r\n                'cos': {precedence: 4, associative: 'right'},\r\n                'tab': {precedence: 4, associative: 'right'},\r\n            }\r\n            this._uniformize = true\r\n        }\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken2(expr: string, start: number): [string, number, string] {\r\n        let token: string, tokenType: string;\r\n        token = '';\r\n        tokenType = '';\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        } else{\r\n            // Order token keys by token characters length (descending)\r\n            const keys = Object.keys(this._tokenConfig).sort((a,b)=>b.length-a.length)\r\n\r\n            for(let key of keys){\r\n                if(expr.substr(start, key.length) === key){\r\n                    token += key;\r\n                    tokenType = 'operation'\r\n                    break\r\n                }\r\n            }\r\n\r\n            if(token===''){\r\n                // No function found ! Might be a coefficient !\r\n                if( expr[start].match(/[0-9]/) ) {\r\n                    token = expr.substr(start).match(/^([0-9.,/]+)/)[0]\r\n                    tokenType = 'coefficient'\r\n                }else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    token = expr.substr(start).match(/^([a-zA-Z])/)[0]\r\n                    tokenType = 'variable'\r\n                }else{\r\n                    console.log('Unidentified token', expr[start])\r\n                    token = expr[start]\r\n                    tokenType = 'monom'\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, tokenType)\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        this.NextToken2(expr, start)\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-zA-Z^]+/g)) || [];\r\n\r\n        if (expr.substr(start, start + 3).match(/^(sin|cos|tan)/g)) {\r\n            token = expr.substr(start, 3)\r\n            tokenType = 'function'\r\n        } else if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        } else if (expr[start].match(/[&|!]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        if(!this._uniformize){return expr}\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n\r\n        // 3x(x-4) => 3x*(x-4)\r\n        expr2 = expr2.replace(/([\\da-zA-Z])(\\()/g, \"$1*$2\");\r\n\r\n        // (x-4)3x => (x-4)*3x\r\n        expr2 = expr2.replace(/(\\))([\\da-zA-Z])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between number and letters.\r\n        expr2 = expr2.replace(/([0-9])([a-zA-Z])/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/([a-zA-Z])([0-9])/g, \"$1*$2\");\r\n\r\n        // Add multiplication between letters ?\r\n        // TODO: More robust solution to handle all letters ?\r\n        expr2 = expr2.replace(/([xyz])([xyz])/g, \"$1*$2\");\r\n\r\n\r\n        // Restore operation auto formating (prevent adding the mutliplcation star\r\n        let fnToken = ['sin', 'cos', 'tan']\r\n        for (let token of fnToken) {\r\n            expr2 = expr2.replace(new RegExp(token + '\\\\*', 'g'), token);\r\n        }\r\n\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     */\r\n    parse(expr: string, operators?: string[]): Shutingyard {\r\n        let outQueue: {token:string, tokenType: string}[] = [],    // Output queue\r\n            opStack: {token:string, tokenType: string}[] = [],     // Operation queue\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '',\r\n            previousOpStatckLength = 0\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken2(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                case 'coefficient':\r\n                case 'variable':\r\n                    outQueue.push({\r\n                        token,\r\n                        tokenType\r\n                    });\r\n                    // if(previousOpStatckLength == opStack.length && outQueue.length>=2){\r\n                    //     console.log('opStatckLength', outQueue, opStack.length)\r\n                    //     outQueue.push('*')\r\n                    // }\r\n                    break;\r\n                case 'operation':\r\n                    previousOpStatckLength = opStack.length;\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || {token: '', tokenType: 'operation'});\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if(opStack.length===0){break;}\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({token,tokenType});\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push({token,tokenType});\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({token: '0', tokenType: 'coefficient'});\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || {token,tokenType});\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                case 'function':\r\n                    opStack.push({token, tokenType});\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {Numeric} from \"./maths/numeric\";\r\nimport {Nthroot} from \"./maths/coefficients/nthroot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Point} from \"./maths/geometry/point\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\nimport {Shutingyard} from \"./maths/shutingyard\";\r\nimport {Logicalset} from \"./maths/algebra/logicalset\";\r\n\r\n// Expose as global\r\n(<any>window).Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n\r\nexport var Pi = {\r\n    ShutingYard: Shutingyard,\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Logicalset: Logicalset,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n"],"sourceRoot":""}