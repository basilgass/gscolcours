{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maths/coefficients/fraction.ts","webpack:///./src/maths/numeric.ts","webpack:///./src/maths/algebra/polynom.ts","webpack:///./src/maths/algebra/equation.ts","webpack:///./src/maths/geometry/vector.ts","webpack:///./src/maths/geometry/point.ts","webpack:///./src/maths/coefficients/nthroot.ts","webpack:///./src/maths/algebra/monom.ts","webpack:///./src/maths/geometry/line.ts","webpack:///./src/main.ts","webpack:///./src/maths/shutingyard.ts","webpack:///./src/maths/algebra/linearSystem.ts","webpack:///./src/maths/algebra/rational.ts","webpack:///./src/maths/geometry/triangle.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Fraction","denominatorOrPeriodic","parse","S","this","_numerator","_denominator","split","length","map","x","isNaN","Number","includes","NaN","isSafeInteger","undefined","toString","Math","pow","floor","denominator","isFraction","numerator","clone","F","zero","one","infinite","Infinity","invalid","opposed","add","N","D","reduce","subtract","multiply","Q","divide","invert","abs","root","sqrt","g","Numeric","gcd","amplify","k","compare","sign","lesser","than","leq","greater","geq","isEqual","isDifferent","isOpposed","isInverted","isZero","isOne","isPositive","isNegative","isInfinity","isFinite","isSquare","areEquals","tex","replace","decimals","round","nb","primes","slice","max","maxV","push","sort","a","b","values","gcd2","percent","random","randomInt","randomBool","Polynom","polynomString","genDisplay","output","forceSign","wrapParentheses","P","_monoms","coefficient","display","inputStr","_rawString","empty","Monom","literalStr","shutingYardToReducedPolynom","test","fractions","letters","SY","Shutingyard","rpn","m1","m2","tokenParam","token","isOperation","pop","substr","console","log","monoms","M","_randomizeDefaults","degree","unit","factorable","allowNullMonom","numberOfMonoms","randomize","config","rndSimple","withFraction","allowZero","reorder","splice","rndFactorable","_factors","factorUnit","isPolynom","concat","isMonom","multiplyByPolynom","multiplyByFraction","multiplyByMonom","multiplyByInteger","xmultiply","euclidian","quotient","reminder","maxMP","monomByDegree","newM","divideByFraction","divideByInteger","nbF","cP1","cP2","isSameAs","isOpposedAt","isFactorized","polynomStringNormalized","replaceAll","polynomStringReduced","factors","matchAll","polyFactors","factorize","f","j","filter","letter","Set","variables","replaceBy","resultPolynom","literal","evaluate","forEach","monom","derivative","dP","maxValue","nbFactorsFound","commonMonom","commonPolynom","getZeroes","zeroes","zeroesAsTex","A","B","C","x1","x2","toFixed","z","indexOf","frac","monomByLetter","hasLetter","getDenominators","denominators","getNumerators","numerators","lcmDenominator","lcm","gcdDenominator","lcmNumerator","gcdNumerator","L","setLetter","min","makeItComplicate","complexity","_texString","mDegree","factorizePartial","texString","mMain","mCheck","mFactor","pFactor","minify","canDivide","evalValue","V","Equation","equations","_varnothing","_real","equationString","pStr","strSign","_findSign","_formatSign","signStr","_reverseSign","_sign","left","right","_left","_right","opts","allLeft","mMove","simplify","isolate","isMultiVariable","cMove","solve","_solutions","_polynom","_solveDegree1","_solveDegree2","_solveDegree3plus","isGreater","isStrictEqual","isAlsoEqual","m0","v","delta","nthDelta","realX1","realX2","sX1","sX2","aF","bF","cF","Nthroot","hasRadical","dfrac","isEquation","join","signAsTex","raw","Vector","isVector","_parseString","isPoint","_x","_y","y","reset","components","scalarProductWithVector","normal","isNormalTo","multiplyByScalar","scalar","divideByScalar","angleWith","sharp","radian","toDegree","PI","acos","norm","normSquare","scalarProduct","v1","v2","Point","origin","middleOf","P1","P2","texValues","numberOfDigits","pts","pmatrix","radical","nthroot","_coefficient","_nth","_radical","_isValid","trim","_literal","clean","randomIntSym","M1","M2","K","item","dM","areSameAs","keys","coeffN","coeffD","Line","_exists","parseByCoefficient","parseByPointAndVector","isLine","equ","has","elem","delete","size","_a","_b","_c","_d","_OA","_n","isParellelTo","line","slope","height","simplifyDirection","intersection","Pt","isParallel","isSame","point","hasIntersection","canonical","equation","mxh","OA","parametric","pt","d2","fraction","iPt","window","Pi","Root","LinearSystem","Rational","Geometry","Triangle","_rpn","match","expr","start","tokenMatch","tokenType","expr2","outQueue","opStack","precedence","associative","tokenPos","Uniformizer","securityLoopLvl2","securityLoopLvl1","NextToken","opTop","reverse","equationStrings","_equations","_findLetters","setCoefficient","coefficients","_letters","setLetters","generate","solutions","solutionsF","_generateOneEquation","coeff","leftValue","equString","_checkIfLinerCombination","mergeEquations","eq1","eq2","factor1","factor2","eq1multiplied","eq2multiplied","E","_resolutionSteps","_solveOneLetter","str","equStr","LS","equArray","repeat","isReal","isVarnothing","c1","c2","LE","reducedEquations","_linearReduction","_lines","intersect","_B","_C","_A","isTriangle","_updateTriangle","AB","BC","AC","_middles","_remarquables","_calculateRemarquableLines","getPointByName","ptName","toUpperCase","getSegment","ptName1","ptName2","remarquables","_calculateBisectors","medians","mediators","heights","bisectors","d1","tlines","lines","b1","b2","hitSegment"],"mappings":"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","file":"pi.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import {Numeric} from \"../numeric\";\r\n\r\nexport class Fraction {\r\n    private _numerator: number;\r\n    private _denominator: number;\r\n\r\n    constructor(value?: any, denominatorOrPeriodic?: number) {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n\r\n        if (value !== undefined) {\r\n            this.parse(value, denominatorOrPeriodic);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isFraction() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n\r\n    get numerator(): number {\r\n        return this._numerator;\r\n    }\r\n\r\n    set numerator(value: number) {\r\n        this._numerator = value;\r\n    }\r\n\r\n    get denominator(): number {\r\n        return this._denominator;\r\n    }\r\n\r\n    set denominator(value: number) {\r\n        this._denominator = value;\r\n    }\r\n\r\n    get value(): number {\r\n        return this._numerator / this._denominator;\r\n    }\r\n\r\n    // Display getter\r\n    get tex(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else if (this._numerator < 0) {\r\n            return `-\\\\frac{ ${-this._numerator} }{ ${this._denominator} }`;\r\n        } else {\r\n            return `\\\\frac{ ${this._numerator} }{ ${this._denominator} }`;\r\n        }\r\n    }\r\n\r\n    get display(): string {\r\n        if (this._denominator === 1) {\r\n            return `${this._numerator}`;\r\n        } else {\r\n            return `${this._numerator}/${this._denominator}`;\r\n        }\r\n    }\r\n\r\n    // Helper function to display fractions\r\n    get frac(): string {\r\n        return this.tex;\r\n    }\r\n\r\n    get dfrac(): string {\r\n        return this.tex.replace('\\\\frac', '\\\\dfrac');\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse the value to get the numerator and denominator\r\n     * @param value : number or string to parse to get the fraction\r\n     * @param denominatorOrPeriodic (optional|number) : length of the periodic part: 2.333333 => 1 or denominator value\r\n     */\r\n    parse = (value: any, denominatorOrPeriodic?: number): Fraction => {\r\n        let S: string[];\r\n\r\n        // A null value means a zero fraction.\r\n        if (value === null) {\r\n            this._numerator = 0;\r\n            this._denominator = 1;\r\n            return this;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                // Split the sting value in two parts: Numerator/Denominator\r\n                S = value.split('/');\r\n\r\n                // Security checks\r\n                    if (S.length > 2) throw \"Two many divide signs\";\r\n                    if (S.map(x => x === '' || isNaN(Number(x))).includes(true)) throw \"Not a number\"\r\n\r\n\r\n                if (S.length === 1) {\r\n                    // No divide sign\r\n                    return this.parse(+S[0]);\r\n                } else if (S.length === 2) {\r\n                    // One divide signe\r\n                    // We check if the denominator is zero\r\n                    if (S[1] === '0') {\r\n                        this._numerator = NaN;\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._numerator = +S[0];\r\n                        this._denominator = +S[1];\r\n                    }\r\n                } else {\r\n                    // More than one divide sign ?\r\n                    this._numerator = NaN;\r\n                    this._denominator = 1;\r\n                }\r\n                break;\r\n            case \"number\":\r\n                if (Number.isSafeInteger(value)) {\r\n                    // The given value is an integer\r\n                    this._numerator = +value;\r\n\r\n                    if (denominatorOrPeriodic === undefined || !Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._denominator = 1;\r\n                    } else {\r\n                        this._denominator = +denominatorOrPeriodic;\r\n                    }\r\n                } else {\r\n                    // The given value is a float number\r\n\r\n                    // Get the number of decimals after the float sign\r\n                    let p: number = (value.toString()).split('.')[1].length;\r\n\r\n                    // Transform the float number in two integer\r\n                    if (denominatorOrPeriodic === undefined) {\r\n                        this._numerator = value * Math.pow(10, p);\r\n                        this._denominator = Math.pow(10, p);\r\n                    } else if (Number.isSafeInteger(denominatorOrPeriodic)) {\r\n                        this._numerator = value * Math.pow(10, p) - Math.floor(value * Math.pow(10, p - denominatorOrPeriodic));\r\n                        this.denominator = Math.pow(10, p) - Math.pow(10, p - denominatorOrPeriodic)\r\n                    }\r\n                }\r\n                break;\r\n            case \"object\":\r\n                if (value.isFraction) {\r\n                    this._numerator = +value.numerator;\r\n                    this._denominator = +value.denominator;\r\n                }\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): Fraction => {\r\n        let F = new Fraction();\r\n        F.numerator = +this._numerator;\r\n        F.denominator = +this._denominator;\r\n        return F;\r\n    };\r\n\r\n    zero = (): Fraction => {\r\n        this._numerator = 0;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    one = (): Fraction => {\r\n        this._numerator = 1;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    infinite = (): Fraction => {\r\n        this._numerator = Infinity;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    invalid = (): Fraction => {\r\n        this._numerator = NaN;\r\n        this._denominator = 1;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Fraction => {\r\n        this._numerator = -this._numerator;\r\n        return this;\r\n    };\r\n\r\n    add = (F: Fraction): Fraction => {\r\n        let N: number = this._numerator,\r\n            D: number = this._denominator;\r\n\r\n        this._numerator = N * F.denominator + F.numerator * D;\r\n        this._denominator = D * F.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (F: Fraction): Fraction => {\r\n        return this.add(F.clone().opposed());\r\n    };\r\n\r\n    multiply = (F: Fraction | number): Fraction => {\r\n        // Parse the value.\r\n        // If it's a fraction, return a clone of it\r\n        // If it's an integer, return the fraction F/1\r\n        let Q = new Fraction(F);\r\n\r\n        this._numerator = this._numerator * Q.numerator;\r\n        this._denominator = this._denominator * Q.denominator;\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    divide = (F: Fraction | number): Fraction => {\r\n        let Q = new Fraction(F);\r\n\r\n        if (Q.numerator === 0) {\r\n            return new Fraction().infinite();\r\n        }\r\n\r\n        let N: number = +this._numerator,\r\n            D: number = +this._denominator;\r\n\r\n        this._numerator = N * Q.denominator;\r\n        this._denominator = D * Q.numerator;\r\n        return this.reduce();\r\n    };\r\n\r\n    invert = (): Fraction => {\r\n        let n = +this._numerator, d = +this._denominator;\r\n        this._numerator = d;\r\n        this._denominator = n;\r\n\r\n        return this;\r\n    }\r\n    pow = (p: number): Fraction => {\r\n        if (!Number.isSafeInteger(p)) {\r\n            return this.invalid();\r\n        }\r\n        this.reduce();\r\n\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        this._numerator = this._numerator ** Math.abs(p);\r\n        this._denominator = this._denominator ** Math.abs(p);\r\n        return this;\r\n    };\r\n\r\n    root = (p: number): Fraction => {\r\n        // TODO: nth - root of a fraction => this will return another type of coefficient.\r\n\r\n        // Check if they are perfect roots..\r\n        if (p === 0) {\r\n            return this;\r\n        }\r\n\r\n        // If negative, invert the fraction\r\n        if (p < 0) {\r\n            this.invert()\r\n        }\r\n\r\n        let n = Math.pow(this._numerator, Math.abs(1 / p)),\r\n            d = Math.pow(this._denominator, Math.abs(1 / p));\r\n\r\n        this._numerator = Math.pow(this._numerator, Math.abs(1 / p));\r\n        this._denominator = Math.pow(this._denominator, Math.abs(1 / p));\r\n        return this;\r\n    }\r\n\r\n    sqrt = (): Fraction => {\r\n        return this.root(2);\r\n    }\r\n\r\n    abs = (): Fraction => {\r\n        this._numerator = Math.abs(this._numerator);\r\n        this._denominator = Math.abs(this._denominator);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations specific to fractions\r\n    // ------------------------------------------\r\n    reduce = (): Fraction => {\r\n        let g = Numeric.gcd(this._numerator, this._denominator);\r\n        this._numerator = this._numerator / g;\r\n        this._denominator = this._denominator / g;\r\n\r\n        if (this._denominator < 0) {\r\n            this._denominator = -this._denominator;\r\n            this._numerator = -this._numerator;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    amplify = (k: number): Fraction => {\r\n        if (Number.isSafeInteger(k)) {\r\n            this._numerator *= k;\r\n            this._denominator *= k;\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (F: Fraction, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '>':\r\n                return this.value > F.value;\r\n            case \">=\" || \"=>\" || \"geq\":\r\n                return this.value >= F.value;\r\n            case \"<\":\r\n                return this.value < F.value;\r\n            case \"<=\" || \"=>\" || \"leq\":\r\n                return this.value <= F.value;\r\n            case \"=\":\r\n                // let F2: Fraction = F.clone().reduce(),\r\n                //     F1: Fraction = this.clone().reduce();\r\n                // return (F1.numerator === F2.numerator && F1.denominator === F2.denominator);\r\n                return this.value === F.value;\r\n            case \"<>\":\r\n                return this.value !== F.value;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /* Compare shortcuts */\r\n    lesser = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<');\r\n    };\r\n    leq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '<=');\r\n    };\r\n    greater = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>');\r\n    };\r\n    geq = (than: Fraction): Boolean => {\r\n        return this.compare(than, '>=');\r\n    };\r\n    isEqual = (than: Fraction): boolean => {\r\n        return this.compare(than, '=');\r\n    }\r\n    isDifferent = (than: Fraction): boolean => {\r\n        return this.compare(than, '<>');\r\n    }\r\n    isOpposed = (p: Fraction): boolean => {\r\n        return this.isEqual(p.clone().opposed());\r\n    }\r\n    isInverted = (p: Fraction): boolean => {\r\n        return this.isEqual(new Fraction().one().divide(p.clone()));\r\n    }\r\n    isZero = (): boolean => {\r\n        return this._numerator === 0;\r\n    }\r\n    isOne = (): boolean => {\r\n        return this._numerator === 1 && this._denominator === 1;\r\n    }\r\n    isPositive = (): boolean => {\r\n        return this.sign()===1;\r\n    }\r\n    isNegative = (): boolean => {\r\n        return this.sign()===-1;\r\n    }\r\n    isNaN = (): boolean => {\r\n        return isNaN(this._numerator);\r\n    }\r\n    isInfinity = (): boolean => {\r\n        return this._numerator === Infinity;\r\n    }\r\n    isFinite = (): boolean => {\r\n        return !this.isInfinity();\r\n    }\r\n    isSquare = (): boolean => {\r\n        return Math.sqrt(this._numerator) % 1 === 0 && Math.sqrt(this._denominator) % 1 === 0\r\n    }\r\n    sign = (): number => {\r\n        return (this._numerator * this._denominator >= 0) ? 1 : -1;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Simple function to determine if it's a fraction\r\n     */\r\n    areEquals = (...F: Fraction[]): boolean => {\r\n        for (let i = 0; i < F.length; i++) {\r\n            if (!this.isEqual(F[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}","export class Numeric{\r\n    static round(value:number, decimals:number=2):number {\r\n        return Number(Math.round(Number(value+'e'+decimals))+'e-'+decimals);\r\n    }\r\n\r\n    /**\r\n     * Get the list of the nth first prime numbers.\r\n     * @param nb : number of primes to choose from\r\n     */\r\n    static prime(nb?:number):number[]{\r\n        let primes:number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973];\r\n        if(nb === undefined){\r\n            return primes;\r\n        }else{\r\n            return primes.slice(0,Math.max(primes.length,nb));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all dividers of a number.\r\n     * @param value\r\n     */\r\n    static dividers(value:number):number[]{\r\n        let D: number[];\r\n        const maxV = Math.sqrt(value);\r\n\r\n        // Initialize the list of dividers.\r\n        D = [];\r\n\r\n        for(let i=1; i<maxV; i++){\r\n            if(value%i===0){\r\n                D.push(i);\r\n                D.push(value/i);\r\n            }\r\n        }\r\n\r\n        // Order numbers.\r\n        D.sort(function(a, b){return a-b;});\r\n        return D;\r\n    }\r\n    /**\r\n     * Great Common Divisor\r\n     * @param values : number values\r\n     */\r\n    static gcd(...values:number[]):number{\r\n        // Define the gcd for two number\r\n        let gcd2 = function(a:number,b:number):number{\r\n            if(b===0){return a;}\r\n            return gcd2(b, a%b);\r\n        };\r\n\r\n        let g:number = 1,\r\n            i:number = 2;\r\n\r\n        // Nothing is given\r\n        if(values.length===0){return 1;}\r\n        // Only one number is given\r\n        if(values.length===1){\r\n            // The first number is zero\r\n            if(values[0]===0){return 1;}\r\n            // Return the number\r\n            return values[0];\r\n        }\r\n\r\n        // We have at least 2 numbers.\r\n        g = gcd2(values[0],values[1]);\r\n\r\n        // The gcd of the two first value is one ? It's already finished.\r\n        if(g===1){return 1;}\r\n\r\n        // The current gcd isn't one. Continue with all next values.\r\n        for(i=2; i<values.length; i++){\r\n            g = gcd2(g, values[i]);\r\n            // Escape if gcd is already one.\r\n            if(g===1){break;}\r\n        }\r\n\r\n        return Math.abs(g);\r\n    }\r\n\r\n    /**\r\n     * Least Common Multiple\r\n     * @param values: list of numbers\r\n     */\r\n    static lcm(...values:number[]):number{\r\n        return values.reduce(function(a,b){\r\n            return Math.abs(a * b / Numeric.gcd(a, b));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Random boolean with a percent ratio\r\n     * @param percent\r\n     */\r\n    static randomBool(percent:number=0.5):boolean{\r\n        return Math.random()<percent;\r\n    }\r\n\r\n    /**\r\n     * Random integer between two values.\r\n     * @param a (number) : From this value to the second value. If the second is ommited, this value is the max value.\r\n     * @param b (number) : To this value. If this is ommited.\r\n     */\r\n    static randomInt(a:number, b?:number):number{\r\n        if(b===undefined){return Numeric.randomInt(0,a);}\r\n\r\n        return Math.floor(Math.random() * (b - a + 1) + a);\r\n    }\r\n\r\n    /**\r\n     * Random integer between -max and max value.\r\n     * @param max (number) : determine the limits.\r\n     * @param zero (bool) : determine if zero is allowed or not.\r\n     */\r\n    static randomIntSym(max:number, zero?:boolean):number{\r\n        if(zero===false){\r\n            return Numeric.randomBool()?this.randomInt(1,max):-this.randomInt(1,max);\r\n        }else{\r\n            return Numeric.randomInt(-max, max);\r\n        }\r\n    }\r\n}","/**\r\n * Polynom module contains everything necessary to handle polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Monom} from './monom';\r\nimport {Shutingyard} from '../shutingyard';\r\nimport {Numeric} from '../numeric';\r\nimport {Fraction} from '../coefficients/fraction';\r\n\r\n/**\r\n * Polynom class can handle polynoms, reorder, resolve, ...\r\n */\r\nexport class Polynom {\r\n    private _rawString: string;\r\n    private _monoms: Monom[];\r\n    private _factors: Polynom[];\r\n    private _texString: string;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     * @param values\r\n     */\r\n    constructor(polynomString?: string, ...values: any[]) {\r\n        this._monoms = [];\r\n        this._factors = [];\r\n        if (polynomString !== undefined) {\r\n            this.parse(polynomString, ...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isPolynom() {\r\n        return true;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get monoms() {\r\n        return this._monoms;\r\n    }\r\n\r\n    set monoms(M: Monom[]) {\r\n        this._monoms = M;\r\n    }\r\n\r\n    get factors(): Polynom[] {\r\n        return this._factors;\r\n    }\r\n\r\n    set factors(value: Polynom[]) {\r\n        this._factors = value;\r\n    }\r\n\r\n    get texString(): string {\r\n        return this._texString;\r\n    }\r\n\r\n    get length() {\r\n        // TODO: Must reduce the monoms list to remove the zero coefficient.\r\n        return this._monoms.length;\r\n    }\r\n\r\n    get display(): string {\r\n        return this.genDisplay();\r\n    }\r\n\r\n    get raw(): string {\r\n        return this._rawString\r\n    }\r\n\r\n    get tex(): string {\r\n        return this.genDisplay('tex');\r\n    }\r\n\r\n    get isMultiVariable(): boolean {\r\n        const B = false;\r\n        for (const m of this._monoms) {\r\n            if (m.variables.length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return B;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            V = V.concat(m.variables);\r\n        }\r\n\r\n        // Remove duplicates.\r\n        V = [...new Set(V)];\r\n\r\n        return V;\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    private genDisplay = (output?: string, forceSign?: boolean, wrapParentheses?: boolean): string => {\r\n        let P: string = '';\r\n\r\n        for (const k of this._monoms) {\r\n            if (k.coefficient.value === 0) {\r\n                continue;\r\n            }\r\n\r\n            P += `${(k.coefficient.sign() === 1 && (P !== '' || forceSign === true)) ? '+' : ''}${(output === 'tex') ? k.tex : k.display}`;\r\n        }\r\n\r\n        if (wrapParentheses === true && this.length > 1) {\r\n            if (output === 'tex') {\r\n                P = `\\\\left( ${P} \\\\right)`;\r\n            } else {\r\n                P = `(${P})`;\r\n            }\r\n        }\r\n\r\n        if (P === '') {\r\n            P = '0';\r\n        }\r\n        return P;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Parse a string to a polynom.\r\n     * @param inputStr\r\n     * @param values: as string, numbers or fractions\r\n     */\r\n    parse = (inputStr: string, ...values: any[]): Polynom => {\r\n        if (values === undefined || values.length === 0) {\r\n            inputStr = '' + inputStr;\r\n            this._rawString = inputStr;\r\n\r\n            // Parse the polynom using the shuting yard algorithm\r\n            if (inputStr !== '' && !isNaN(Number(inputStr))) {\r\n                this.empty();\r\n                // It's a simple number.\r\n                let m = new Monom();\r\n                m.coefficient = new Fraction(inputStr);\r\n                m.literalStr = '';\r\n                this.add(m);\r\n                return this;\r\n            }\r\n\r\n            // Parse the string.\r\n            return this.shutingYardToReducedPolynom(inputStr);\r\n        } else if (/^[a-z]/.test(inputStr)) {\r\n            // We assume the inputStr contains only letters.\r\n            this.empty();\r\n\r\n            let fractions = values.map(x => new Fraction(x));\r\n            // Multiple setLetter version\r\n            if (inputStr.length > 1) {\r\n                // TODO: check that the number of values given correspond to the letters (+1 eventually)\r\n                let letters = inputStr.split(''),\r\n                    i = 0;\r\n                for (let F of fractions) {\r\n                    let m = new Monom();\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = letters[i] || '';\r\n                    this.add(m);\r\n                    i++;\r\n                }\r\n            }\r\n            // Single setLetter version\r\n            else {\r\n                let n = fractions.length - 1;\r\n                for (let F of fractions) {\r\n                    let m = new Monom()\r\n                    m.coefficient = F.clone();\r\n                    m.literalStr = `${inputStr}^${n}`\r\n                    this.add(m);\r\n                    n--;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this.zero();\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Main parse using a shutting yard class\r\n     * @param inputStr\r\n     */\r\n    private shutingYardToReducedPolynom = (inputStr: string): Polynom => {\r\n        // Get the RPN array of the current expression\r\n        const SY: Shutingyard = new Shutingyard().parse(inputStr);\r\n        const rpn: string[] = SY.rpn;\r\n        const m: Polynom[] = [];\r\n        let m1: Polynom;\r\n        let m2: Polynom;\r\n        let tokenParam: number = null;\r\n\r\n        for (const token of rpn) {\r\n            if (SY.isOperation(token)) {\r\n                // Polynom\r\n                m2 = (m.pop()) || new Polynom().zero();\r\n\r\n                if (token[0] !== '^') {\r\n                    if (m.length > 0) {\r\n                        // Get the first item from the stack\r\n                        m1 = (m.pop()) || new Polynom().zero();\r\n                    } else {\r\n                        // Nothing is in the stack - create an empty polynom\r\n                        m1 = new Polynom().zero();\r\n                    }\r\n                } else {\r\n                    // tokenParam = parseInt(token.split('^')[1]);\r\n                    tokenParam = Number(token.substr(1));\r\n                    // m2.clone().pow(tokenParam);\r\n                }\r\n\r\n\r\n                switch (token) {\r\n                    case '+':\r\n                        m1.add(m2);\r\n                        break;\r\n                    case '-':\r\n                        m1.subtract(m2);\r\n                        break;\r\n                    case '*':\r\n                        m1.multiply(m2);\r\n                        break;\r\n                    // TODO: Shuting yard to polynom divide.\r\n                    // case '/': console.log(m1.display, m2.display);m1.divide(m2); break;\r\n                    // By default, all not operation value are converted to polynom. Therefore, the pow value must be converted to an integer.\r\n                    // TODO: Shuting yard to polynom pow : case '^': m1.pow(+m2.monoms[0].coefficient.numerator); break;\r\n                    default:\r\n                        if (tokenParam !== null) {\r\n                            if (token[0] === '^') {\r\n                                m1 = m2.clone().pow(tokenParam);\r\n                            }\r\n                        } else {\r\n                            console.log('Token not recognized in shuting yard to reduce polynom: ', token);\r\n                        }\r\n                }\r\n                m.push(m1);\r\n            } else {\r\n                // console.log('NOT OPERATION: ', token, new Monom(token).tex)\r\n                m.push(new Polynom().add(new Monom(token)));\r\n            }\r\n        }\r\n\r\n        this._monoms = m[0].monoms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the polynom\r\n     */\r\n    clone = (): Polynom => {\r\n        const P = new Polynom();\r\n        const M: Monom[] = [];\r\n\r\n        for (const m of this._monoms) {\r\n            M.push(m.clone());\r\n        }\r\n\r\n        P.monoms = M;\r\n        return P;\r\n    };\r\n\r\n    /**\r\n     * Set the polynom to zero.\r\n     * @returns {this}\r\n     */\r\n    zero = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().zero());\r\n        this._rawString = '0';\r\n        return this;\r\n    };\r\n\r\n    one = (): Polynom => {\r\n        this._monoms = [];\r\n        this._monoms.push(new Monom().one());\r\n        this._rawString = '1';\r\n        return this;\r\n    }\r\n\r\n    empty = (): Polynom => {\r\n        this._monoms = [];\r\n        this._rawString = '';\r\n        return this;\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Polynom generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2,\r\n        unit: true,\r\n        fractions: false,\r\n        factorable: false,\r\n        letters: 'x',\r\n        allowNullMonom: false,\r\n        numberOfMonoms: false\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (config: { [key: string]: number | string | boolean }): Polynom => {\r\n        let P = new Polynom();\r\n\r\n        // Check the config file and use the default values.\r\n        if (config === undefined) {\r\n            config = {};\r\n        }\r\n        for (let k in this._randomizeDefaults) {\r\n            if (config[k] === undefined) {\r\n                config[k] = this._randomizeDefaults[k];\r\n            }\r\n        }\r\n\r\n        // TODO: Build a more robust randomize function\r\n        return P;\r\n    }\r\n\r\n\r\n    // TODO: Remove rndSimple and rndFactorable.\r\n    /**\r\n     * Polynom generator\r\n     * @param degree\r\n     * @param unit\r\n     * @param withFraction\r\n     * @param letters\r\n     * @param allowZero\r\n     * @param numberOfMonoms\r\n     */\r\n    rndSimple = (degree: number = 1, unit: boolean = false, withFraction: boolean = false, letters: string = 'x', allowZero: boolean = true, numberOfMonoms: number = -1): Polynom => {\r\n        // TODO: Make rndSimple polynom generator more user friendly\r\n        // If the current polynom (this) is already created, initialise it!\r\n        this.empty();\r\n\r\n        let M: Monom;\r\n        for (let i = degree; i >= 0; i--) {\r\n            M = new Monom().random(letters, i, withFraction, (i === degree) ? false : allowZero);\r\n\r\n            // We want to have the greatest degree monom coefficient to be unit.\r\n            if (unit && i === degree) {\r\n                M.coefficient = new Fraction().one();\r\n            }\r\n            this.add(M);\r\n        }\r\n\r\n        // Remove randomly the monoms to match the number of monoms.\r\n        if (numberOfMonoms > 0 && numberOfMonoms < this.length) {\r\n            this.reorder();\r\n            // Keep the greatest degree monom.\r\n            // But remove randomly the next monoms.\r\n            while (this.length > numberOfMonoms) {\r\n                this._monoms.splice(Numeric.randomInt(1, this.length - 1), 1);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    rndFactorable = (degree: number = 2, unit: boolean | number = false, letters: string = 'x'): Polynom => {\r\n        // TODO: Make rndFactorable polynom generator more user friendly\r\n        this._factors = [];\r\n        for (let i = 0; i < degree; i++) {\r\n            let factorUnit = unit === true || i >= unit,\r\n                p = new Polynom().rndSimple(1, factorUnit, false, letters);\r\n\r\n            this._factors.push(p);\r\n        }\r\n\r\n        this.empty().monoms = this._factors[0].monoms;\r\n        for (let i = 1; i < this._factors.length; i++) {\r\n            this.multiply(this._factors[i]);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Polynom => {\r\n        this._monoms = this._monoms.map(m => m.opposed());\r\n        return this;\r\n    };\r\n\r\n    add = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()));\r\n            } else {\r\n                this._monoms.push(new Monom(value));\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    subtract = (...values: any[]): Polynom => {\r\n\r\n        for (let value of values) {\r\n            if (value.isPolynom) {\r\n                this._monoms = this._monoms.concat(value.clone().opposed().monoms);\r\n            } else if (value.isMonom) {\r\n                this._monoms.push(value.clone().opposed());\r\n            } else if (Number.isSafeInteger(value)) {\r\n                this._monoms.push(new Monom(value.toString()).opposed());\r\n            } else {\r\n                this._monoms.push(new Monom(value).opposed());\r\n            }\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    multiply = (value: any): Polynom => {\r\n        if (value.isPolynom) {\r\n            return this.multiplyByPolynom(value);\r\n        } else if (value.isFraction) {\r\n            return this.multiplyByFraction(value);\r\n        } else if (value.isMonom) {\r\n            return this.multiplyByMonom(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.multiplyByInteger(value);\r\n        }\r\n\r\n        // Something went wrong...\r\n        return this;\r\n    }\r\n\r\n    private multiplyByPolynom = (P: Polynom): Polynom => {\r\n        const M: Monom[] = [];\r\n        for (const m1 of this._monoms) {\r\n            for (const m2 of P.monoms) {\r\n                M.push(Monom.xmultiply(m1, m2));\r\n            }\r\n        }\r\n\r\n        this._monoms = M;\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.multiply(F);\r\n        }\r\n\r\n        return this.reduce();\r\n    };\r\n\r\n    private multiplyByInteger = (nb: number): Polynom => {\r\n        return this.multiplyByFraction(new Fraction(nb));\r\n    };\r\n\r\n    private multiplyByMonom = (M: Monom): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.multiply(M)\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n    /**\r\n     * Divide the current polynom by another polynom.\r\n     * @param P\r\n     * returns {quotient: Polynom, reminder: Polynom}\r\n     */\r\n    euclidian = (P: Polynom): { quotient: Polynom, reminder: Polynom } => {\r\n        const quotient: Polynom = new Polynom().zero();\r\n        const reminder: Polynom = this.clone();\r\n        const maxMP: Monom = P.monomByDegree();\r\n        let newM: Monom;\r\n\r\n        // Make the euclidian division of the two polynoms.\r\n        while (reminder.degree() >= P.degree()) {\r\n            // Get the greatest monom divided by the max monom of the divider\r\n            newM = reminder.monomByDegree().clone().divide(maxMP);\r\n\r\n            if (newM.isZero()) {\r\n                break;\r\n            }\r\n\r\n            // Get the new quotient and reminder.\r\n            quotient.add(newM);\r\n            reminder.subtract(P.clone().multiply(newM));\r\n        }\r\n\r\n        return {quotient, reminder};\r\n    };\r\n\r\n    divide = (value: any): Polynom => {\r\n        if (value.isFraction) {\r\n            this.divideByFraction(value);\r\n        } else if (Number.isSafeInteger(value)) {\r\n            return this.divideByInteger(value);\r\n        }\r\n    }\r\n\r\n    private divideByInteger = (nb: number): Polynom => {\r\n        const nbF = new Fraction(nb);\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(nbF);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    private divideByFraction = (F: Fraction): Polynom => {\r\n        for (const m of this._monoms) {\r\n            m.coefficient.divide(F);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    pow = (nb: number): Polynom => {\r\n        if (!Number.isSafeInteger(nb)) {\r\n            return this.zero();\r\n        }\r\n        if (nb < 0) {\r\n            return this.zero();\r\n        }\r\n        if (nb === 0) {\r\n            return new Polynom();\r\n        }\r\n\r\n        const P = this.clone();\r\n        for (let i = 1; i < nb; i++) {\r\n            this.multiply(P);\r\n        }\r\n        return this.reduce();\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    /**\r\n     * Compare the current coefficient with another coefficient\r\n     * @param F (Coefficient) The coefficient to compare\r\n     * @param sign (string| default is =): authorized values: =, <, <=, >, >= with some variations.\r\n     */\r\n    compare = (P: Polynom, sign?: string): boolean => {\r\n        if (sign === undefined) {\r\n            sign = '='\r\n        }\r\n\r\n        // Create clone version to reduce them without altering the original polynoms.\r\n        const cP1 = this.clone().reduce().reorder();\r\n        const cP2 = P.clone().reduce().reorder();\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                // Check if the coefficients are the isSame.\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isEqual(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            case 'same':\r\n                // They must have the isSame length and the isSame degree\r\n                if (cP1.length !== cP2.length || cP1.degree() !== cP2.degree()) {\r\n                    return false;\r\n                }\r\n\r\n                for (const i in cP1.monoms) {\r\n                    if (!cP1.monoms[i].isSameAs(cP2.monoms[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    isZero(): boolean {\r\n        return (this._monoms.length === 1 && this._monoms[0].coefficient.isZero()) || this._monoms.length === 0;\r\n    }\r\n\r\n    isOne(): boolean {\r\n        return this._monoms.length === 1 && this._monoms[0].coefficient.isOne();\r\n    }\r\n\r\n    isEqual = (P: Polynom): boolean => {\r\n        return this.compare(P, '=');\r\n    };\r\n\r\n    isSameAs = (P: Polynom): boolean => {\r\n        return this.compare(P, 'same');\r\n    };\r\n\r\n    isOpposedAt = (P: Polynom): boolean => {\r\n        return this.compare(P.clone().opposed(), '=');\r\n    };\r\n\r\n    isFactorized = (polynomString: string): boolean => {\r\n        let P = new Polynom(polynomString);\r\n\r\n        // Both polynom aren't the same (once developed and reduced => they cannot be equivalent)\r\n        if (!this.isEqual(P)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the provided (string) version is fully factorized.\r\n        // Run a regex on the string.\r\n        let polynomStringNormalized = polynomString.replaceAll('*', ''),\r\n            polynomStringReduced = '' + polynomStringNormalized,\r\n            factors: string[] = [];\r\n\r\n        for (let x of polynomStringNormalized.matchAll(/\\(([a-z0-9+\\-]+)\\)(\\^[0-9]*)?/g)) {\r\n            if (x[2] !== undefined) {\r\n                for (let i = 0; i < +x[2].substr(1); i++) {\r\n                    factors.push(x[1])\r\n                }\r\n            } else {\r\n                factors.push(x[1]);\r\n            }\r\n            polynomStringReduced = polynomStringReduced.replaceAll(x[0], '');\r\n        }\r\n        if (polynomStringReduced !== '') {\r\n            factors.push(polynomStringReduced);\r\n        }\r\n        let polyFactors = factors.map(x => new Polynom(x));\r\n\r\n        // Factorize the current polynom.\r\n        this.factorize();\r\n\r\n        // Compare the given factors with the generated factors\r\n        let sign = 1, maxNumberOfIteration = polyFactors.length * 2;\r\n        for (let f of this.factors) {\r\n            for (let i = 0; i < polyFactors.length; i++) {\r\n                if (f.isEqual(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    break;\r\n                } else if (f.isOpposedAt(polyFactors[i])) {\r\n                    polyFactors.splice(i, 1);\r\n                    sign = -sign;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polyfactors must be empty and the cumulative opposite factors must be 1.\r\n        return (polyFactors.length === 0 && sign === 1);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Misc polynoms functions\r\n    // -------------------------------------\r\n    reduce = (): Polynom => {\r\n        for (let i = 0; i < this._monoms.length; i++) {\r\n            for (let j = i + 1; j < this._monoms.length; j++) {\r\n                if (this._monoms[i].isSameAs(this.monoms[j])) {\r\n                    this._monoms[i].add(this.monoms[j]);\r\n                    this._monoms.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove all null monoms\r\n        this._monoms = this._monoms.filter((m) => {\r\n            return m.coefficient.value !== 0\r\n        });\r\n\r\n        // Reduce all monoms coefficient.\r\n        for (const m of this._monoms) {\r\n            m.coefficient.reduce();\r\n        }\r\n\r\n        if (this.length === 0) {\r\n            return new Polynom().zero();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    reorder = (letter: string = 'x'): Polynom => {\r\n        // TODO: Must handle multiple setLetter reorder system\r\n        this._monoms.sort(function (a, b) {\r\n            return b.degree(letter) - a.degree(letter)\r\n        });\r\n        return this.reduce();\r\n    };\r\n\r\n    degree = (letter?: string): number => {\r\n        let d: number = 0;\r\n        for (const m of this._monoms) {\r\n            d = Math.max(m.degree(letter), d);\r\n        }\r\n        return d;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        let L: string[] = [], S = new Set();\r\n\r\n        for (let m of this._monoms) {\r\n            S = new Set([...S, ...m.variables]);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return [...S];\r\n    }\r\n\r\n    /**\r\n     * Replace a variable (letter) by a polynom.\r\n     * @param letter\r\n     * @param P\r\n     */\r\n    replaceBy = (letter: string, P: Polynom): Polynom => {\r\n        let pow: number;\r\n        const resultPolynom: Polynom = new Polynom().zero();\r\n\r\n        for (const m of this.monoms) {\r\n            if (m.literal[letter] === undefined || m.literal[letter] === 0) {\r\n                resultPolynom.add(m.clone());\r\n            } else {\r\n                // We have found a setLetter.\r\n                // Get the power and reset it.\r\n                pow = +m.literal[letter];\r\n                delete m.literal[letter];\r\n\r\n                resultPolynom.add(P.clone().pow(pow).multiply(m));\r\n            }\r\n        }\r\n\r\n        this._monoms = resultPolynom.reduce().reorder().monoms;\r\n        return this;\r\n    };\r\n\r\n    // Evaluate a polynom.\r\n    evaluate = (values: { [key: string]: Fraction }): Fraction => {\r\n        const r = new Fraction().zero();\r\n\r\n        this._monoms.forEach(monom => {\r\n            //console.log('Evaluate polynom: ', monom.display, values, monom.evaluate(values).display);\r\n            r.add(monom.evaluate(values));\r\n        });\r\n        return r;\r\n    };\r\n\r\n    derivative = (letter?: string): Polynom => {\r\n        let dP = new Polynom();\r\n\r\n        for (let m of this._monoms) {\r\n            dP.add(m.derivative(letter));\r\n        }\r\n\r\n        return dP;\r\n\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Polynoms factorization functions\r\n    // -------------------------------------\r\n    /**\r\n     * Factorize a polynom and store the best results in factors.\r\n     * @param maxValue Defines the greatest value to search to (default is 20).\r\n     */\r\n    factorize = (maxValue?: number): Polynom => {\r\n        // TODO: Must handle other letters than 'x'\r\n        this._factors = [];\r\n\r\n        // Duplicate the polynom\r\n        let P = this.clone(),\r\n            nbFactorsFound = 0;\r\n\r\n        // Determine if the polynom is \"negative\", eg has a max monom degree with a negative coefficient.\r\n        if (P.monomByDegree().coefficient.numerator < 0) {\r\n            this._factors.push(new Polynom('-1'));\r\n        }\r\n\r\n        // Determine if there is a 'common' monom\r\n        let M = P.commonMonom();\r\n        if (!M.isOne()) {\r\n            let commonPolynom = new Polynom()\r\n            commonPolynom.monoms = [M]\r\n            if (this._factors.length === 0) {\r\n                this._factors.push(commonPolynom);\r\n            } else {\r\n                this._factors = [];\r\n                this._factors.push(commonPolynom.opposed());\r\n            }\r\n            P = P.euclidian(commonPolynom).quotient;\r\n\r\n            nbFactorsFound = commonPolynom.degree();\r\n        }\r\n\r\n        // Main loop.\r\n        //\r\n        // Do it only if degree is equal or less than one.\r\n        if (P.degree() <= 1) {\r\n            this._factors.push(P.clone());\r\n        } else {\r\n            // Force test.\r\n            let Q = new Fraction(),\r\n                F,\r\n                degree = P.degree();\r\n\r\n            maxValue = maxValue === undefined ? 20 : maxValue;\r\n\r\n            // Test all polynom similar to ax+b\r\n            for (let a = 1; a <= maxValue; a++) {\r\n                // Skip a coefficient of 0\r\n                for (let b = -maxValue; b <= maxValue; b++) {\r\n\r\n                    Q.parse(-b, a);\r\n\r\n                    if (P.evaluate({x: Q})) {\r\n                        F = new Polynom(`${a}x+${b}`);\r\n                        while (P.evaluate({x: Q}).value === 0) {\r\n                            this._factors.push(F.clone());\r\n                            nbFactorsFound++;\r\n\r\n                            // Means it can be divided without reminders.\r\n                            P = P.euclidian(F).quotient;\r\n                        }\r\n                    }\r\n\r\n                    // Continue if the numbers of factors found equals the degree.\r\n                    if (nbFactorsFound > degree) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (P.degree() > 1) {\r\n                this._factors.push(P.clone());\r\n                return this;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Polynoms helpers functions\r\n    // -------------------------------------\r\n    // TODO: get zeroes for more than first degree\r\n    getZeroes = (): (Fraction | boolean)[] => {\r\n        const Z: Fraction[] = [];\r\n\r\n        switch (this.degree()) {\r\n            case 0:\r\n                if (this._monoms[0].coefficient.value === 0) {\r\n                    return [true];\r\n                } else {\r\n                    return [false];\r\n                }\r\n            case 1:\r\n                // There is only one monoms,\r\n                if (this._monoms.length === 1) {\r\n                    return [new Fraction().zero()];\r\n                } else {\r\n                    const P = this.clone().reduce().reorder();\r\n                    return [P.monoms[1].coefficient.opposed().divide(P.monoms[0].coefficient)];\r\n                }\r\n            // TODO: Determine the zeros of an equation of second degree.\r\n            //case 2:\r\n            default:\r\n                // Make sure the polynom is factorized.\r\n                if (this._factors.length === 0) {\r\n                    this.factorize()\r\n                }\r\n\r\n                let zeroes = [], zeroesAsTex = [];\r\n                for (let P of this._factors) {\r\n                    if (P.degree() > 2) {\r\n                        // TODO: Handle other polynom.\r\n\r\n                    } else if (P.degree() === 2) {\r\n                        let A = P.monomByDegree(2).coefficient,\r\n                            B = P.monomByDegree(1).coefficient,\r\n                            C = P.monomByDegree(0).coefficient,\r\n                            D = B.clone().pow(2).subtract(A.clone().multiply(C).multiply(4));\r\n\r\n                        if (D.value > 0) {\r\n                            /*console.log('Two zeroes for ', P.tex); */\r\n                            let x1 = (-(B.value) + Math.sqrt(D.value)) / (2 * A.value),\r\n                                x2 = (-(B.value) - Math.sqrt(D.value)) / (2 * A.value);\r\n\r\n                            zeroes.push(new Fraction(x1.toFixed(3)).reduce());\r\n                            zeroes.push(new Fraction(x2.toFixed(3)).reduce());\r\n                        } else if (D.value === 0) {\r\n                            /*console.log('One zero for ', P.tex); */\r\n\r\n                        } else {\r\n                            console.log('No zero for ', P.tex);\r\n                        }\r\n                    } else {\r\n                        for (let z of P.getZeroes()) {\r\n                            // Check if the zero is already in the list.\r\n                            if (z === false || z === true) {\r\n                                continue;\r\n                            }\r\n                            if (zeroesAsTex.indexOf(z.frac) === -1) {\r\n                                zeroes.push(z);\r\n                                zeroesAsTex.push(z.frac);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return zeroes;\r\n        }\r\n        return Z;\r\n    };\r\n\r\n\r\n    // TODO: analyse the next functions to determine if they are useful or not...\r\n    monomByDegree = (degree?: number, letter?: string): Monom => {\r\n        if (degree === undefined) {\r\n            // return the highest degree monom.\r\n            return this.monomByDegree(this.degree(letter));\r\n        }\r\n\r\n        // Reduce the polynom.\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.degree(letter) === degree) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        // Nothing was found - return the null monom.\r\n        return new Monom().zero();\r\n    };\r\n\r\n    // Used in LinearSystem.tex\r\n    monomByLetter = (letter: string): Monom => {\r\n        const M = this.clone().reduce();\r\n        for (const m of M._monoms) {\r\n            if (m.hasLetter(letter)) {\r\n                return m.clone();\r\n            }\r\n        }\r\n\r\n        return new Monom().zero();\r\n    };\r\n\r\n\r\n    // Next functions are used for for commonMonom, which is used in the factorize method.\r\n    getDenominators = (): number[] => {\r\n        const denominators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            denominators.push(m.coefficient.denominator);\r\n        }\r\n        return denominators;\r\n    };\r\n\r\n    getNumerators = (): number[] => {\r\n        const numerators: number[] = [];\r\n        for (const m of this._monoms) {\r\n            numerators.push(m.coefficient.numerator);\r\n        }\r\n        return numerators;\r\n    };\r\n\r\n    lcmDenominator = (): number => {\r\n        return Numeric.lcm(...this.getDenominators());\r\n    };\r\n\r\n    gcdDenominator = (): number => {\r\n        return Numeric.gcd(...this.getDenominators());\r\n    };\r\n\r\n    lcmNumerator = (): number => {\r\n        return Numeric.lcm(...this.getNumerators());\r\n    };\r\n\r\n    gcdNumerator = (): number => {\r\n        return Numeric.gcd(...this.getNumerators());\r\n    };\r\n\r\n    commonMonom = (): Monom => {\r\n        let M = new Monom().one(), numerator: number, denominator: number, degree = this.degree();\r\n\r\n        numerator = this.gcdNumerator();\r\n        denominator = this.gcdDenominator();\r\n\r\n        M.coefficient = new Fraction(numerator, denominator);\r\n        for (let L of this.variables) {\r\n            // Initialize the setLetter with the max degree\r\n            M.setLetter(L, degree);\r\n            for (let m of this._monoms) {\r\n                M.setLetter(L, Math.min(m.degree(L), M.degree(L)));\r\n                if (M.degree(L) === 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return M;\r\n    }\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * This will generate a not reduced tex string of the polynom.\r\n     * @param complexity : Number of iteration to increase the complexity.\r\n     */\r\n    makeItComplicate = (complexity: number = 1): Polynom => {\r\n        this._texString = '';\r\n\r\n        // The polynom must be at least of the first degree.\r\n        if (this.degree() < 1) {\r\n            return this;\r\n        }\r\n\r\n        const mDegree = Numeric.randomInt(0, this.degree() - 1);\r\n        const A = new Polynom().rndSimple(mDegree, false, complexity > 1, 'x', false, complexity > 1 ? -1 : 1);\r\n        const B = new Polynom().rndSimple(1, false, complexity > 1);\r\n        const C = this.clone().subtract(A.clone().multiply(B));\r\n\r\n        // Try to factorize a little bit the C polynom.\r\n        C.factorizePartial(true);\r\n        this._texString = `${A.genDisplay('tex', false, true)} \\\\cdot ${B.genDisplay('tex', false, true)} ${C.texString} `;\r\n\r\n        return this;\r\n    };\r\n    factorizePartial = (forceSign?: boolean): Polynom => {\r\n        this._texString = '';\r\n        // Try to find two monoms with a common coefficient.\r\n        if (this.length <= 1) {\r\n            return this;\r\n        }\r\n\r\n        let mMain: Monom,\r\n            mCheck: Monom,\r\n            mFactor: Monom,\r\n            pFactor: Polynom,\r\n            // pRemain: Polynom,\r\n            g: number, sign: string;\r\n\r\n        for (let i = 0; i < this.length; i++) {\r\n            mMain = this._monoms[i].clone();\r\n            // We factorize only if the main coefficient isn't a fraction\r\n            // if(mMain.coefficient.denominator!==1){continue;}\r\n            for (let j = i + 1; j < this.length; j++) {\r\n                mCheck = this._monoms[j].clone();\r\n                // if(mCheck.coefficient.denominator!==1){continue;}\r\n\r\n                g = Numeric.gcd(mMain.coefficient.numerator, mCheck.coefficient.numerator);\r\n                if (g !== 1) {\r\n                    // mFactor = mMain.clone().divide(mCheck); // This gets the literal part.\r\n                    // mFactor.coefficient = new Fraction(g); // Set the coefficient to the gcd.\r\n                    mFactor = Monom.lcm(mMain, mCheck);\r\n                    sign = mMain.coefficient.sign() === 1 ? '+' : '-';\r\n                    this._texString = `${forceSign === true ? sign : (sign === '+' ? '' : sign)}${mFactor.tex}`;\r\n\r\n                    pFactor = new Polynom().add(mMain.divide(mFactor)).add(mCheck.divide(mFactor));\r\n                    this._texString += pFactor.genDisplay('tex', false, true);\r\n\r\n                    this._texString += this.clone().subtract(pFactor.clone().multiply(mFactor)).genDisplay('tex', true, false);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._texString = this.genDisplay('tex', forceSign);\r\n\r\n        return this;\r\n    };\r\n    /**\r\n     * reduce the coefficient value as if the polynom was equal to zero.\r\n     */\r\n    minify = (): Polynom => {\r\n        // First multiply by the common denominator.\r\n        this.multiply(this.lcmDenominator()).divide(this.gcdNumerator()).reduce();\r\n        return this.reduce();\r\n    };\r\n    /**\r\n     * Determine if the current polynom is divisible by P\r\n     * TODO: should work with any polynom, not only first degree polynoms and the setLetter should disappear\r\n     * @param P\r\n     * @param letter - default setLetter\r\n     */\r\n    canDivide = (P: Polynom, letter: string = 'x'): boolean => {\r\n        const d = P.degree();\r\n\r\n        const evalValue: { [key: string]: Fraction } = {};\r\n        // A zero degree polynom can always divide, except if it's the zero polynom.\r\n        if (d === 0) {\r\n            return !P.isZero;\r\n        }\r\n\r\n        // The polynom is of degree one.\r\n        if (d === 1) {\r\n            const z = P.getZeroes();\r\n            // The zero is an undefined zero.\r\n            if (z[0] === true || z[0] === false) {\r\n                return false;\r\n            }\r\n\r\n            evalValue[letter] = z[0];\r\n            return this.evaluate(evalValue).value === 0;\r\n        }\r\n\r\n        // The polynom is of degree 2 or more...\r\n        if (d > 1) {\r\n            console.log('Currently, only first degree polynom are supported');\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n}\r\n","import {Polynom} from \"./polynom\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Nthroot} from \"../coefficients/nthroot\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\nimport {Vector} from \"../geometry/vector\";\r\nimport lookupFiles = Mocha.utils.lookupFiles;\r\n\r\nexport class Equation {\r\n    private _left: Polynom;  // Left part of the equation\r\n    private _right: Polynom; // Right part of the equation\r\n    private _sign: string;   // Signe of the equation, by default =\r\n\r\n    private _polynom: Polynom;  // Used to solve the equation // TODO: remove the private value ?\r\n    private _solutions: string[];    // Array of the solutions\r\n\r\n    // Undetermined solutions.\r\n    private _varnothing: string = '\\\\varnothing';\r\n    private _real: string = '\\\\mathbb{R}';\r\n\r\n    /**\r\n     * Create an Equation using two polynoms.\r\n     * @param equation Equation string\r\n     */\r\n    constructor(...equations: any) {\r\n        // Default equation\r\n        this._left = new Polynom().zero();\r\n        this._right = new Polynom().zero();\r\n        this._sign = '=';\r\n\r\n        if (equations.length === 1) {\r\n            if (equations[0].isEquation === true) {\r\n                return equations[0].clone();\r\n            } else {\r\n                this.parse(equations[0]);\r\n            }\r\n        } else if (equations.length === 2) {\r\n            this.left = equations[0].isPolynom ? equations[0].clone() : new Polynom(equations[0]);\r\n            this.right = equations[1].isPolynom ? equations[1].clone() : new Polynom(equations[1]);\r\n        } else {\r\n            // Return default empty equation\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isEquation() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    // TODO: Check the getters and setters.\r\n    get solutions(): string[] {\r\n        return this._solutions;\r\n    }\r\n\r\n    get solution(): string {\r\n        if (this._solutions.length === 1\r\n            &&\r\n            (\r\n                this._solutions[0] === this._real\r\n                || this._solutions[0] === this._varnothing\r\n                || this._solutions[0].includes('\\\\left')\r\n            )\r\n        ) {\r\n            return `S = ${this._solutions[0]}`;\r\n        }\r\n        return `S = \\\\left{ ${this._solutions.join(';')} \\\\right}`;\r\n    }\r\n\r\n    get isReal(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._real;\r\n    }\r\n\r\n    get isVarnothing(): boolean {\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n        return this._solutions[0] === this._varnothing;\r\n    }\r\n\r\n    get signAsTex(): string {\r\n        if (this._sign === '>=' || this._sign === '=>' || this._sign === 'geq') {\r\n            return '\\\\geq';\r\n        }\r\n        if (this._sign === '<=' || this._sign === '=<' || this._sign === 'leq') {\r\n            return '\\\\leq';\r\n        }\r\n        return this._sign;\r\n    }\r\n\r\n    get tex(): string {\r\n        return `${this._left.tex}${this.signAsTex}${this._right.tex}`;\r\n    }\r\n\r\n    get raw(): string {\r\n        return `${this._left.raw}${this.signAsTex}${this._right.raw}`;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        return [...new Set(this._right.variables.concat(this._left.variables))];\r\n    }\r\n\r\n    get numberOfVars(): number {\r\n        return this.variables.length;\r\n    }\r\n\r\n    get left(): Polynom {\r\n        return this._left;\r\n    }\r\n\r\n    set left(value: Polynom) {\r\n        this._left = value;\r\n    }\r\n\r\n    get right(): Polynom {\r\n        return this._right;\r\n    }\r\n\r\n    set right(value: Polynom) {\r\n        this._right = value;\r\n    }\r\n\r\n    get sign(): string {\r\n        return this._sign;\r\n    }\r\n\r\n    set sign(value: string) {\r\n        // Set the sign value as formatted.\r\n        this._sign = this._formatSign(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (equationString: string): Equation => {\r\n        let pStr: string[], strSign: string | false;\r\n        // Find the string separator\r\n        strSign = this._findSign(equationString);\r\n\r\n        if (strSign === false) {\r\n            console.log('The equation is not valid (no sign found)');\r\n            return;\r\n        }\r\n\r\n        // The StrSign is found\r\n        pStr = equationString.split(strSign);\r\n\r\n        return this.create(new Polynom(pStr[0]), new Polynom(pStr[1]), this._formatSign(strSign));\r\n    };\r\n\r\n    private _findSign = (equationString: string): string | false => {\r\n        let strSign: string = '';\r\n\r\n        if (equationString.includes('geq')) {\r\n            return (equationString.includes('\\\\geq')) ? '\\\\geq' : 'geq';\r\n        } else if (equationString.includes('leq')) {\r\n            return (equationString.includes('\\\\leq')) ? '\\\\leq' : 'leq';\r\n        } else if (equationString.includes('>=')) {\r\n            return '>=';\r\n        } else if (equationString.includes('=>')) {\r\n            return '=>';\r\n        } else if (equationString.includes('>')) {\r\n            return '>';\r\n        } else if (equationString.includes('<=')) {\r\n            return '<=';\r\n        } else if (equationString.includes('=<')) {\r\n            return '=<';\r\n        } else if (equationString.includes('<')) {\r\n            return '<';\r\n        } else if (equationString.includes('=')) {\r\n            return '='\r\n        }\r\n        if (strSign === '') {\r\n            console.log('Equation: parse string : sign not found');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    private _formatSign = (signStr: string): string => {\r\n        if (signStr === undefined) {\r\n            return '=';\r\n        }\r\n\r\n        if (signStr.includes('geq')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>=')) {\r\n            return '>=';\r\n        } else if (signStr.includes('=>')) {\r\n            return '>=';\r\n        } else if (signStr.includes('>')) {\r\n            return '>';\r\n        } else if (signStr.includes('leq')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<=')) {\r\n            return '<=';\r\n        } else if (signStr.includes('=<')) {\r\n            return '<=';\r\n        } else if (signStr.includes('<')) {\r\n            return '<';\r\n        } else {\r\n            return '='\r\n        }\r\n    };\r\n\r\n    private _reverseSign = (): Equation => {\r\n        if (this._sign === '=') {\r\n            return this;\r\n        }\r\n\r\n        if (this._sign.includes('<')) {\r\n            this._sign.replace('<', '>');\r\n            return this;\r\n        }\r\n        if (this._sign.includes('>')) {\r\n            this._sign.replace('>', '<');\r\n            return this;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    create = (left: Polynom, right: Polynom, sign?: string): Equation => {\r\n        this._left = left;\r\n        this._right = right;\r\n        this._sign = this._formatSign(sign);\r\n        return this;\r\n    };\r\n\r\n    clone = (): Equation => {\r\n        return new Equation().create(this._left.clone(), this._right.clone(), this._sign + '');\r\n    };\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    private _randomizeDefaults: { [key: string]: number | string | boolean } = {\r\n        degree: 2\r\n    };\r\n    get randomizeDefaults(): { [key: string]: number | string | boolean } {\r\n        return this._randomizeDefaults;\r\n    }\r\n\r\n    set randomizeDefaults(value) {\r\n        this._randomizeDefaults = value;\r\n    }\r\n\r\n    randomize = (opts?: {}, sign?: string): Equation => {\r\n        // TODO: Generate equations randomly, using config.\r\n        return new Equation().create(new Polynom(), new Polynom(), sign);\r\n    };\r\n\r\n\r\n    // -----------------------------------------------\r\n    // Equations operations\r\n    // -----------------------------------------------\r\n    /**\r\n     * Reorder will move all monoms containing a letter on the left, all the other on the right.\r\n     */\r\n    reorder = (allLeft?: boolean): Equation => {\r\n        // Move all monoms of degree greater than 0 to the left.\r\n        // and all zero degree monoms to the right.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n\r\n        if (allLeft) {\r\n            return this;\r\n        }\r\n        let mMove: Monom;\r\n        for (let m of this._left.monoms) {\r\n            if (m.degree() === 0) {\r\n                mMove = m.clone();\r\n                this._left.subtract(mMove);\r\n                this._right.subtract(mMove);\r\n            }\r\n        }\r\n\r\n        // Reorder the left and right polynoms\r\n        this._left.reorder();\r\n        this._right.reorder();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiply by the lcm denominator and divide by the gcm numerators.\r\n     */\r\n    simplify = (): Equation => {\r\n        this.multiply(Numeric.lcm(...this._left.getDenominators(),...this._right.getDenominators()));\r\n        this.divide(Numeric.gcd(...this._left.getNumerators(),...this._right.getNumerators()));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder the polynom to have only one letter on the left, the rest on the right.\r\n     * @param letter\r\n     */\r\n    isolate = (letter?: string): Equation | false => {\r\n        // Determine if we can isolate the variables.\r\n\r\n        // Both part of the equations must be of the first degree.\r\n        //TODO: handle equations of degree two or more ?\r\n        if (this.degree(letter) !== 1) {\r\n            return false;\r\n        }\r\n\r\n        // Modify the equation to isolate the asked variable.\r\n        // TODO: must handle equations like 3xy+5y=4 => y = 4/(3x-5)\r\n        if (this.isMultiVariable()) {\r\n            return false;\r\n        }\r\n\r\n        // Isolate the letter.\r\n        let mMove: Monom, cMove: Fraction;\r\n        // Start by moving everything to the left.\r\n        this._left.subtract(this._right);\r\n        this._right.zero();\r\n        for (let m of this._left.monoms) {\r\n            if (!m.hasLetter(letter)) {\r\n                mMove = m.clone();\r\n                this._left.add(mMove.clone().opposed());\r\n                this._right.add(mMove.clone().opposed());\r\n            }\r\n        }\r\n\r\n        // In theory, we should have only one item on the left.\r\n        if (this._left.length !== 1) {\r\n            return false;\r\n        }\r\n        cMove = this._left.monoms[0].coefficient.clone();\r\n        this._left.divide(cMove);\r\n        this._right.divide(cMove);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple an equation by a fraction value.\r\n     * @param F\r\n     */\r\n    multiply = (value: any): Equation => {\r\n\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        // Multiply each part of the equation by the fraction\r\n        this._left.multiply(F);\r\n        this._right.multiply(F);\r\n\r\n        // The sign of the inequation must be changed.\r\n        if (this._sign !== '=' && F.sign() === -1) {\r\n            this._reverseSign();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    divide = (value: any): Equation => {\r\n        // Make sure we have a fraction.\r\n        let F: Fraction = new Fraction(value);\r\n\r\n        if(F.isZero()){\r\n            return this;\r\n        }else {\r\n            return this.multiply(F.invert());\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations helpers\r\n    // -----------------------------------------------\r\n\r\n    /**\r\n     * Get the degree of the equation\r\n     * @param letter\r\n     */\r\n    degree = (letter?: string): number => {\r\n        return Math.max(this._left.degree(letter), this._right.degree(letter));\r\n    };\r\n\r\n    /**\r\n     * Determine if the equation contains more than one letter/variable.\r\n     */\r\n    isMultiVariable = (): boolean => {\r\n        return this._left.isMultiVariable || this._right.isMultiVariable;\r\n    };\r\n\r\n    letters = (): string[] => {\r\n        // @ts-ignore\r\n        return [...new Set([...this._left.letters(), ...this._right.letters()])];\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations solving algorithms\r\n    // -----------------------------------------------\r\n    solve = (letter?: string): Equation => {\r\n        // Initialise the variables:\r\n        this._solutions = [];\r\n\r\n        // TODO: this._polynom could be removed.\r\n        // TODO: consolidate solving equations (inequations vs equations)\r\n        this._polynom = this._left.clone().subtract(this._right);\r\n\r\n        switch (this._polynom.degree(letter)) {\r\n            case 0:\r\n            case 1:\r\n                this._solveDegree1(letter);\r\n                break;\r\n            case 2:\r\n                this._solveDegree2(letter);\r\n                break;\r\n            default:\r\n                this._solveDegree3plus(letter);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    private isGreater = (): boolean => {\r\n        if (this._sign.indexOf('>') !== -1) {\r\n            return true;\r\n        }\r\n        return this._sign.indexOf('geq') !== -1;\r\n\r\n    };\r\n    private isStrictEqual = (): boolean => {\r\n        return this._sign === '=';\r\n    };\r\n    private isAlsoEqual = (): boolean => {\r\n        if (this._sign.indexOf('=') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('geq') !== -1) {\r\n            return true;\r\n        }\r\n        if (this._sign.indexOf('leq') !== -1) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private _solveDegree1 = (letter?: string): string[] => {\r\n        const m1 = this._polynom.monomByDegree(1, letter).coefficient,\r\n            m0 = this._polynom.monomByDegree(0, letter).coefficient,\r\n            v = m0.clone().opposed().divide(m1).display;\r\n        let s: string;\r\n\r\n        if (this.isStrictEqual()) {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0) {\r\n                    this._solutions = [this._real];\r\n                } else {\r\n                    this._solutions = [this._varnothing];\r\n                }\r\n            } else {\r\n                this._solutions = [v];\r\n            }\r\n        } else {\r\n            if (m1.value === 0) {\r\n                // In this case, the coefficient of the x variable is zero.\r\n                if (m0.value === 0 && this.isAlsoEqual()) {\r\n                    s = '\\\\mathbb{R}';\r\n                } else {\r\n                    if (m0.value > 0) {\r\n                        s = this.isGreater() ? this._real : this._varnothing;\r\n                    } else {\r\n                        s = !this.isGreater() ? this._real : this._varnothing;\r\n                    }\r\n                }\r\n            } else {\r\n                // Must handle the case if the m1 monom is negative.\r\n                if ((this.isGreater() && m1.sign() === 1) || (!this.isGreater() && m1.sign() === -1)) {\r\n                    s = `\\\\left${this.isAlsoEqual() ? '\\\\[' : '\\\\]'}${v};+\\\\infty\\\\right\\\\[`;\r\n                } else {\r\n                    s = `\\\\left\\\\]-\\\\infty;${v} \\\\right\\\\${this.isAlsoEqual() ? '\\\\]' : '\\\\['}`;\r\n                }\r\n            }\r\n            this._solutions = [s];\r\n        }\r\n\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree2 = (letter?: string): string[] => {\r\n        let aF = this._polynom.monomByDegree(2, letter).coefficient,\r\n            bF = this._polynom.monomByDegree(1, letter).coefficient,\r\n            cF = this._polynom.monomByDegree(0, letter).coefficient,\r\n            delta: number, nthDelta: Nthroot,\r\n            lcm = Numeric.lcm(aF.denominator, bF.denominator, cF.denominator),\r\n            a = aF.multiply(lcm).value,\r\n            b = bF.multiply(lcm).value,\r\n            c = cF.multiply(lcm).value,\r\n            realX1: number, realX2: number,\r\n            sX1: string, sX2: string;\r\n\r\n        delta = b * b - 4 * a * c;\r\n\r\n        if (delta > 0) {\r\n            realX1 = (-b - Math.sqrt(delta)) / (2 * a);\r\n            realX2 = (-b + Math.sqrt(delta)) / (2 * a);\r\n\r\n            if(delta>1.0e5){\r\n                // The delta is too big to be parsed !\r\n                this._solutions = [\r\n                    ((-b - Math.sqrt(delta))/(2 * a)).toFixed(5),\r\n                    ((-b + Math.sqrt(delta))/(2 * a)).toFixed(5)\r\n                ]\r\n            }else {\r\n                nthDelta = new Nthroot().parse(delta).reduce();\r\n                if (nthDelta.hasRadical()) {\r\n                    // -b +- coeff\\sqrt{radical}\r\n                    // -------------------------\r\n                    //           2a\r\n                    let gcd = Numeric.gcd(b, 2 * a, nthDelta.coefficient);\r\n                    nthDelta.coefficient = nthDelta.coefficient / gcd;\r\n\r\n                    // TODO: Can i delete the next line ?\r\n                    // let deltaC = nthDelta.coefficient, deltaR = nthDelta.radical;\r\n                    if (b !== 0) {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `${-b / gcd} - ${nthDelta.tex}`,\r\n                                `${-b / gcd} + ${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{${-b / gcd} - ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${-b / gcd} + ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        if (2 * a / gcd === 1) {\r\n                            this._solutions = [\r\n                                `- ${nthDelta.tex}`,\r\n                                `${nthDelta.tex}`,\r\n                            ]\r\n                        } else {\r\n                            this._solutions = [\r\n                                `\\\\dfrac{- ${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                                `\\\\dfrac{${nthDelta.tex} }{ ${2 * a / gcd} }`,\r\n                            ]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // -b +- d / 2a\r\n                    this._solutions = [\r\n                        new Fraction(-b - nthDelta.coefficient, 2 * a).reduce().dfrac,\r\n                        new Fraction(-b + nthDelta.coefficient, 2 * a).reduce().dfrac\r\n                    ]\r\n                }\r\n            }\r\n\r\n        } else if (delta === 0) {\r\n            this._solutions = [new Fraction(-b, 2 * a).reduce().dfrac];\r\n        } else {\r\n            this._solutions = [this._varnothing];\r\n        }\r\n\r\n\r\n        // Handle now the inequations.\r\n        if (!this.isStrictEqual()) {\r\n            if (this._solutions.length === 2) {\r\n                sX1 = (realX1 < realX2) ? this._solutions[0] : this._solutions[1];\r\n                sX2 = (realX1 < realX2) ? this._solutions[1] : this._solutions[0];\r\n\r\n                if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                    this._solutions = [\r\n                        `\\\\left]-\\\\infty ; ${sX1}\\\\right${this.isAlsoEqual() ? ']' : '['} \\\\cup \\\\left${this.isAlsoEqual() ? '[' : ']'}${sX2};+\\\\infty\\\\right[`\r\n                    ];\r\n                } else {\r\n                    this._solutions = [\r\n                        `\\\\left${this.isAlsoEqual() ? '[' : ']'}${sX1} ; ${sX2}\\\\right${this.isAlsoEqual() ? ']' : '['}`\r\n                    ]\r\n                }\r\n            } else if (this._solutions.length === 1 && this._solutions[0] !== this._varnothing) {\r\n                if (!this.isAlsoEqual()) {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [\r\n                            `\\\\left]-\\\\infty ; ${this._solutions[0]}\\\\right[ \\\\cup \\\\left]${this._solutions[0]};+\\\\infty\\\\right[`\r\n                        ];\r\n                    } else {\r\n                        this._solutions = [this._varnothing];\r\n                    }\r\n                } else {\r\n                    if ((this.isGreater() && aF.sign() === 1) || (!this.isGreater() && aF.sign() === -1)) {\r\n                        this._solutions = [this._real];\r\n                    } else {\r\n                        // this._solutions = [ this._solutions[0] ];\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isGreater()) {\r\n                    this._solutions = [aF.sign() === 1 ? this._real : this._varnothing];\r\n                } else {\r\n                    this._solutions = [aF.sign() === -1 ? this._real : this._varnothing];\r\n                }\r\n            }\r\n        }\r\n        return this._solutions;\r\n    };\r\n\r\n    private _solveDegree3plus = (letter?: string): string[] => {\r\n        // TODO: try to resolve equations with a degree superior than 2.\r\n        this._solutions = [letter];  // ESLint remove system :(\r\n        return this._solutions;\r\n    };\r\n\r\n}","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\nexport class Vector {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isVector() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get normSquare(): Fraction {\r\n        return this._x.clone().pow(2).add(this._y.clone().pow(2));\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this.normSquare.value);\r\n    }\r\n\r\n    get tex(): string {\r\n        return `\\\\begin{pmatrix}${this._x.tex} \\\\\\\\\\ ${this._y.tex} \\\\end{pmatrix}`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Vector => {\r\n        // TODO: Must be more strict about what is given and limit to two dimensional vectors.p\r\n        // Maybe more than one value was given...\r\n        // Initialize the vector\r\n        this.zero();\r\n\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            if (values[0].isVector) {\r\n                return values[0].clone()\r\n            } else {\r\n                return this._parseString(values[0])\r\n            }\r\n        }\r\n\r\n        if (values.length >= 2) {\r\n            // Two points are given - skip the third value.\r\n            if (values[0].isPoint && values[1].isPoint) {\r\n                this._x = values[1].x.clone().subtract(values[0].x)\r\n                this._y = values[1].y.clone().subtract(values[0].y)\r\n                return this;\r\n            }\r\n\r\n            // Fractions or a number are give\r\n            if (values[0].isFraction || !isNaN(values[0])) {\r\n                this._x = new Fraction(values[0])\r\n            }\r\n            if (values[1].isFraction || !isNaN(values[1])) {\r\n                this._y = new Fraction(values[1])\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Vector => {\r\n        let V = new Vector();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    reset = (): Vector => {\r\n        this._x = null;\r\n        this._y = null;\r\n        return this;\r\n    }\r\n\r\n    zero = (): Vector => {\r\n        this.reset();\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    one = (): Vector => {\r\n        this._x = new Fraction();\r\n        this._y = new Fraction();\r\n        return this;\r\n    }\r\n\r\n    private _parseString = (value: string): Vector => {\r\n        // Split comma, semi colon or single space.\r\n        let components = value.split(/[,;\\s]/g);\r\n\r\n        // Validate the fraction values.\r\n        this.x = new Fraction(components[0] || null);\r\n        this.y = new Fraction(components[1] || null);\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    opposed = (): Vector => {\r\n        this._x.opposed();\r\n        this._y.opposed();\r\n        return this;\r\n    }\r\n\r\n    add = (V: Vector): Vector => {\r\n        this._x.add(V.x);\r\n        this._y.add(V.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    subtract = (V: Vector): Vector => {\r\n        return this.add(V.clone().opposed());\r\n    }\r\n\r\n    scalarProductWithVector = (V: Vector): Fraction => {\r\n        // TODO: Add the scalar factor !!!!\r\n        return this._x.clone().multiply(V.x).add(this._y.clone().multiply(V.y));\r\n    }\r\n\r\n    static scalarProduct = (v1: Vector, v2: Vector): number => {\r\n        // TODO: Transform to fraction with nthroot.\r\n        return  v1.x.value * v2.x.value + v1.y.value * v2.y.value;\r\n    };\r\n\r\n    normal = (): Vector => {\r\n        let x = this.x.clone().opposed(), y = this.y.clone();\r\n        this._x = y;\r\n        this._y = x;\r\n        return this;\r\n    }\r\n\r\n    isNormalTo = (v: Vector): boolean => {\r\n        return this.scalarProductWithVector(v).isZero()\r\n    }\r\n\r\n    multiplyByScalar = (k: any): Vector => {\r\n        let scalar = new Fraction(k);\r\n        this._x.multiply(scalar);\r\n        this._y.multiply(scalar);\r\n        return this;\r\n    }\r\n\r\n    divideByScalar = (k:any): Vector => {\r\n        return this.multiplyByScalar(new Fraction(k).invert());\r\n    }\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    simplify = (): Vector => {\r\n        // Multiply by the lcm of denominators.\r\n        return this.multiplyByScalar(Numeric.lcm(this._x.denominator, this._y.denominator))\r\n            .divideByScalar(Numeric.gcd(this._x.numerator, this._y.numerator));\r\n    }\r\n\r\n    angleWith = (V: Vector, sharp?: Boolean, radian?: Boolean): number => {\r\n        let scalar = this.scalarProductWithVector(V).value,\r\n            toDegree = radian ? 1 : 180 / Math.PI;\r\n        if (sharp) {\r\n            scalar = Math.abs(scalar);\r\n        }\r\n\r\n        return toDegree * Math.acos(scalar / (this.norm * V.norm));\r\n    }\r\n}\r\n","/**\r\n * Vector module contains everything necessary to handle 2d or 3d vectors.\r\n * @module Vector\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\n\r\n//TODO: Ajouter une vérification si la droite existe.\r\nexport class Point {\r\n    private _x: Fraction;   // 1st component\r\n    private _y: Fraction;   // 2nd component\r\n    private _exist: Boolean;\r\n\r\n    constructor(...values: any) {\r\n        this._x = new Fraction().zero();\r\n        this._y = new Fraction().zero();\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n    };\r\n\r\n    get isPoint() {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get x(): Fraction {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: Fraction) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): Fraction {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: Fraction) {\r\n        this._y = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.tex);\r\n        pts.push(this._y.tex);\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    parse = (...values: any): Point => {\r\n        // Initialize the value.\r\n        this.zero();\r\n\r\n        // Nothing is given\r\n        if (values.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // One element is given - might be already a point !\r\n        if (values.length === 1) {\r\n            if (values[0].isPoint) {\r\n                return values.clone();\r\n            }\r\n\r\n            // Value given as a dictionnary\r\n            if (values[0].x !== undefined && values[0].y !== undefined) {\r\n                this._x = new Fraction(values[0].x).reduce()\r\n                this._y = new Fraction(values[0].y).reduce()\r\n            } else {\r\n                return this.zero();\r\n            }\r\n        }\r\n        if (values.length === 2) {\r\n            this._x = new Fraction(values[0]).reduce()\r\n            this._y = new Fraction(values[1]).reduce()\r\n        }\r\n\r\n\r\n        return this;\r\n    };\r\n\r\n    clone = (): Point => {\r\n        let V = new Point();\r\n\r\n        if (this._x !== null) {\r\n            V.x = this._x.clone();\r\n        }\r\n        if (this._y !== null) {\r\n            V.y = this._y.clone();\r\n        }\r\n        return V;\r\n    }\r\n\r\n    zero = (): Point => {\r\n        this._x = new Fraction(null);\r\n        this._y = new Fraction(null);\r\n        return this;\r\n    }\r\n\r\n    origin = (): Point => {\r\n        this.zero();\r\n        return this;\r\n    }\r\n\r\n    middleOf = (P1: Point, P2: Point): Point => {\r\n        this._x = P1.x.clone().add(P2.x).divide(2);\r\n        this._y = P1.y.clone().add(P2.y).divide(2);\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Display functions\r\n    // ------------------------------------------\r\n    texValues = (numberOfDigits: number): string => {\r\n        let pts = [];\r\n\r\n        pts.push(this._x.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n        pts.push(this._y.value.toFixed(numberOfDigits===undefined?2:numberOfDigits));\r\n\r\n        return `\\\\left(${pts.join(';')}\\\\right)`\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Vector functions\r\n    // ------------------------------------------\r\n\r\n    // ------------------------------------------\r\n    // Static functions\r\n    // ------------------------------------------\r\n    static pmatrix = (a: any, b: any, c?: any): string => {\r\n        if (c === undefined) {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\end{pmatrix}`;\r\n        } else {\r\n            return `\\\\begin{pmatrix} ${a.tex ? a.tex : a} \\\\\\\\ ${b.tex ? b.tex : b} \\\\\\\\ ${c.tex ? c.tex : c} \\\\end{pmatrix}`;\r\n        }\r\n    };\r\n\r\n}\r\n","export class Nthroot {\r\n    private _radical: number;\r\n    private _nth: number;\r\n    private _coefficient: number;\r\n    private _isValid:boolean;\r\n\r\n    constructor() {\r\n        this._radical = 1;\r\n        this._coefficient = 1;\r\n        this._nth = 2;\r\n        this._isValid = true;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get radical(): number {\r\n        return this._radical;\r\n    }\r\n\r\n    set radical(value: number) {\r\n        this._radical = value;\r\n    }\r\n\r\n    get nth(): number {\r\n        return this._nth;\r\n    }\r\n\r\n    set nth(value: number) {\r\n        if (Number.isSafeInteger(value) && value >= 2) {\r\n            this._nth = value;\r\n        } else {\r\n            // Error setting the nth root.\r\n            console.log('Error setting the nth root');\r\n            this._nth = 2;\r\n        }\r\n    }\r\n\r\n    get coefficient(): number {\r\n        return this._coefficient;\r\n    }\r\n\r\n    set coefficient(value: number) {\r\n        this._coefficient = value;\r\n    }\r\n\r\n    get tex(): string {\r\n        let C: string;\r\n\r\n        if (this._coefficient === 1) {\r\n            C = '';\r\n        } else if (this._coefficient === -1) {\r\n            C = '-';\r\n        } else {\r\n            C = this._coefficient.toString();\r\n        }\r\n\r\n        if (this._radical === 1) {\r\n            return `${this._coefficient}`;\r\n        } else {\r\n            if (this._nth === 2) {\r\n                return `${C}\\\\sqrt{${this._radical}}`\r\n            } else {\r\n                return `${C}\\\\sqrt[${this._nth}]{${this._radical}}`\r\n            }\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        return this._coefficient * Math.pow(this._radical, 1 / this._nth);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (radical: number, nthroot?: number, coefficient?: number): Nthroot => {\r\n        this._coefficient = (coefficient === undefined) ? 1 : coefficient;\r\n        this._nth = (nthroot === undefined) ? 2 : nthroot;\r\n        this._radical = (radical === undefined) ? 1 : radical;\r\n\r\n        if(this._nth%2===0 && this._radical<0){\r\n            this._isValid = false;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    reduce = (): Nthroot => {\r\n        // Max value to test.\r\n        let V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n        while (V > 1) {\r\n            if (this._radical % Math.pow(V, this._nth) === 0) {\r\n                // It's dividable by V^n\r\n                this._coefficient *= V;\r\n                this._radical = this._radical / Math.pow(V, this._nth);\r\n\r\n                // Redifine the new testing value (this is optimization)\r\n                V = Math.floor(Math.pow(this._radical, 1 / this._nth));\r\n                continue;\r\n            }\r\n            V--;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    multiply = (N: Nthroot): Nthroot => {\r\n        this._radical *= N.radical;\r\n        return this.reduce();\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Help functions\r\n    // ------------------------------------------\r\n    hasRadical = ():boolean => {\r\n        return !(this._radical===1 || this._radical===0 || this._isValid===false)\r\n    };\r\n}","/***\r\n * Monom class\r\n * Defined as coefficient * literal\r\n * Examples: 3x^2, 3/5x^2, ...\r\n */\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Numeric} from \"../numeric\";\r\n\r\n\r\nexport class Monom {\r\n    private _coefficient: Fraction;\r\n    private _literal: { [Key: string]: number };\r\n\r\n    /**\r\n     * Create the monom object.\r\n     * @param value (optional) string\r\n     */\r\n    constructor(value?: string) {\r\n        this.zero();\r\n\r\n        if (value !== undefined) {\r\n            // A string is given - try to parse the value.\r\n            this.parse(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get isMonom() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the coefficient as fraction\r\n     */\r\n    get coefficient(): Fraction {\r\n        return this._coefficient;\r\n    }\r\n\r\n    /**\r\n     * Set the coefficient value of the monom\r\n     * @param F     Fraction\r\n     */\r\n    set coefficient(F: Fraction) {\r\n        this._coefficient = F;\r\n    }\r\n\r\n    /**\r\n     * Get the literal part, as dictionary\r\n     */\r\n    get literal(): { [Key: string]: number } {\r\n        return this._literal;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom\r\n     * @param L     Literal part as dictionary: <setLetter: exposant>\r\n     */\r\n    set literal(L: { [Key: string]: number }) {\r\n        this._literal = L;\r\n    }\r\n\r\n    /**\r\n     * Set the literal part of the monom from a string\r\n     * @param inputStr  String like x^2y^3\r\n     */\r\n    set literalStr(inputStr: string) {\r\n        // Match all x^n\r\n        for (const v of [...inputStr.matchAll(/([a-z])\\^([+-]?[0-9]+)/g)]) {\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += +v[2];\r\n        }\r\n        for (const v of [...inputStr.matchAll(/([a-z](?!\\^))/g)]) {\r\n            // Match all single letters\r\n            if (!(v[1] in this._literal)) {\r\n                this._literal[v[1]] = 0;\r\n            }\r\n            this._literal[v[1]] += 1;\r\n        }\r\n    }\r\n\r\n    // Getter heplers.\r\n    /**\r\n     * Get the variables letters\r\n     */\r\n    get variables(): string[] {\r\n        let M = this.clone().clean();\r\n        return Object.keys(this._literal)\r\n    }\r\n\r\n    // Display getter\r\n    /**\r\n     * This display getter is to be used in the polynom display getter\r\n     */\r\n    get display(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.display}`;\r\n            } else {\r\n                return '';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.display}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Display the monom, forcing the '+' sign to appear\r\n     */\r\n    get displayWithSign(): string {\r\n        // TODO: Rename or remove this getter ?\r\n        let d: String = this.display;\r\n        return (d[0] !== '-' ? '+' : '') + d;\r\n    }\r\n\r\n    /**\r\n     * Get the tex output of the monom\r\n     */\r\n    get tex(): string {\r\n        let L: string = '';\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] !== 0) {\r\n                L += `${letter}`;\r\n                if (this._literal[letter] > 1) {\r\n                    L += `^${this._literal[letter]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (L === '') {\r\n            // No setLetter - means it's only a number !\r\n            if (this._coefficient.value != 0) {\r\n                return `${this._coefficient.dfrac}`;\r\n            } else {\r\n                return '0';\r\n            }\r\n        } else {\r\n            if (this._coefficient.value === 1) {\r\n                return L;\r\n            } else if (this._coefficient.value === -1) {\r\n                return `-${L}`;\r\n            } else if (this._coefficient.value === 0) {\r\n                return '0';\r\n            } else {\r\n                return `${this._coefficient.dfrac}${L}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // -----------------------------------------\r\n    /**\r\n     * Parse a string to a monom. The string may include fraction.\r\n     * @param inputStr\r\n     */\r\n    parse = (inputStr: string): Monom => {\r\n        // Set the literal part.\r\n        this.literalStr = inputStr;\r\n\r\n        // Get the coefficient\r\n        this._coefficient = new Fraction();\r\n\r\n        for (const v of [...inputStr.replace(/([a-z])|(\\^[+-]?[0-9]+)/g, ',').split(',')]) {\r\n            // The value is empty.\r\n            if (v.trim() === '') {\r\n                continue;\r\n            }\r\n\r\n            // Multiple the current coefficient by the new found value.\r\n            this._coefficient.multiply(new Fraction(v.trim()));\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clone the current Monom.\r\n     */\r\n    clone = (): Monom => {\r\n        let F: Monom = new Monom();\r\n\r\n        F.coefficient = this._coefficient.clone();\r\n\r\n        // Copy the literal parts.\r\n        for (let k in this._literal) {\r\n            F.setLetter(k, this._literal[k]);\r\n        }\r\n        return F;\r\n    };\r\n\r\n    /**\r\n     * Create a zero value monom\r\n     */\r\n    zero = (): Monom => {\r\n        this._coefficient = new Fraction().zero();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Create a one value monom\r\n     */\r\n    one = (): Monom => {\r\n        this._coefficient = new Fraction().one();\r\n        this._literal = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clean the monom by removing each letters with a power of zero.\r\n     */\r\n    clean = (): Monom => {\r\n        for (let letter in this._literal) {\r\n            if (this._literal[letter] === 0) {\r\n                delete this._literal[letter];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Generate a random monom\r\n     * @param letters       Letters to use, as a string\r\n     * @param degree        Max degree (default 1)\r\n     * @param withFraction  Allows fraction as coefficient (default false)\r\n     * @param allowZero     Allows null monom (default false)\r\n     */\r\n    random = (letters: string = 'x', degree: number = 1, withFraction: boolean = false, allowZero: boolean = false): Monom => {\r\n        // TODO: Randomize monoms: options or make it subclass ?\r\n        this.coefficient.parse(Numeric.randomIntSym(10, allowZero), (withFraction) ? Numeric.randomInt(1, 10) : 1);\r\n\r\n        for (let L of letters.split('')) {\r\n            this.setLetter(L, (letters.length > 1) ? Numeric.randomInt(degree) : degree);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Get the opposed\r\n     * Returns a monom.\r\n     */\r\n    opposed = (): Monom => {\r\n        this._coefficient.opposed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Add all similar monoms. If they aren't similar, they are simply skipped.\r\n     * @param M (Monom[]) The monoms to add.\r\n     */\r\n    add = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient);\r\n            } else {\r\n                console.log('Add: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Subtract multiple monoms\r\n     * @param M (Monom[]) The monoms to subtract\r\n     */\r\n    subtract = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            if (this.isSameAs(m)) {\r\n                this._coefficient.add(m.coefficient.clone().opposed());\r\n            } else {\r\n                console.log('Subtract: Is not similar: ', m.display);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Multiple multiple monoms to the current monom\r\n     * @param M (Monom[]) The monoms to multiply to.\r\n     */\r\n    multiply = (...M: Monom[]): Monom => {\r\n        for (let m of M) {\r\n            // Multiply the coefficient.\r\n            this._coefficient.multiply(m.coefficient);\r\n            // Multiply the literal parts.\r\n            for (let letter in m.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? m.literal[letter] : this._literal[letter] + m.literal[letter];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Divide the current monoms by multiple monoms\r\n     * @param M (Monom[])\r\n     */\r\n    divide = (...M: Monom[]): Monom => {\r\n        // Depending on the given value, choose the current item\r\n        for (let v of M) {\r\n            // Divide the coefficient\r\n            this._coefficient.divide(v.coefficient);\r\n\r\n            // Subtract the power values\r\n            for (let letter in v.literal) {\r\n                this._literal[letter] = (this._literal[letter] === undefined) ? -v.literal[letter] : this._literal[letter] - v.literal[letter];\r\n\r\n                // If the power of a particular setLetter is zero, delete it from the literal part..\r\n                if (this._literal[letter] === 0) {\r\n                    delete this._literal[letter];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the pow of a monom.\r\n     * @param nb (number) : Mathematical pow\r\n     */\r\n    pow = (nb: number): Monom => {\r\n        this._coefficient.pow(nb);\r\n        for (let letter in this._literal) {\r\n            this._literal[letter] *= nb;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Get the nth-root of the monom\r\n     * @param p\r\n     */\r\n    root = (p: number): Monom => {\r\n        // TODO: determiner the nth root of a monom\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the square root of a monom\r\n     */\r\n    sqrt = (): Monom => {\r\n        return this.root(2);\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Compare functions\r\n    // ------------------------------------------\r\n    compare = (M: Monom, sign?: string): boolean => {\r\n        // TODO: Build the compare systems.\r\n        if (sign === undefined) {\r\n            sign = '=';\r\n        }\r\n\r\n\r\n        switch (sign) {\r\n            case '=':\r\n                // To be equal, they must be the isSame\r\n                if (!this.compare(M, 'same')) {\r\n                    return false;\r\n                }\r\n\r\n                // The litteral parts are the isSame. The coefficient must be equal\r\n                return this._coefficient.isEqual(M.coefficient);\r\n            case 'same':\r\n                // Get the list of all variables from both monoms.\r\n                let M1: string[] = this.variables,\r\n                    M2: string[] = M.variables,\r\n                    K: string[] = M1.concat(M2.filter((item) => M1.indexOf(item) < 0));\r\n\r\n                for (let key of K) {\r\n                    // The setLetter is not available in one of the monom\r\n                    if (this._literal[key] === undefined || M.literal[key] === undefined) {\r\n                        return false;\r\n                    }\r\n                    // The setLetter does not have the isSame power in each monoms.\r\n                    if (this._literal[key] !== M.literal[key]) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // All are positive check - the monoms are the sames.\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is null\r\n     */\r\n    isZero(): boolean {\r\n        return this._coefficient.value === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the monom is one\r\n     */\r\n    isOne(): boolean {\r\n        return this._coefficient.value === 1 && this.variables.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if two monoms are equals\r\n     * @param M\r\n     */\r\n    isEqual = (M: Monom): boolean => {\r\n        return this.compare(M, '=');\r\n    };\r\n\r\n    /**\r\n     * Determine if two monoms are similar\r\n     * @param M\r\n     */\r\n    isSameAs = (M: Monom): boolean => {\r\n        return this.compare(M, 'same');\r\n    };\r\n\r\n    // ------------------------------------------\r\n    // Misc monoms functions\r\n    // -------------------------------------\r\n    /**\r\n     * Determine if a monom contains a setLetter in it's literal part\r\n     * @param letter\r\n     */\r\n    hasLetter = (letter?: string): boolean => {\r\n        return this._literal[letter === undefined ? 'x' : letter] > 0;\r\n    };\r\n\r\n    /**\r\n     * Set the power of a particular setLetter\r\n     * @param letter (string) Letter to change\r\n     * @param pow (number) Power of the setLetter (must be positive integer.\r\n     */\r\n    setLetter = (letter: string, pow: number): void => {\r\n        // If the power is not legal or is zero, remove the setLetter from the dict\r\n        if (pow <= 0 || !Number.isSafeInteger(pow)) {\r\n            if (this._literal[letter] !== undefined) {\r\n                delete this._literal[letter];\r\n            }\r\n        } else {\r\n            this._literal[letter] = pow;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the degree of a monom. If no setLetter is given, the result will be the global degree.\r\n     * @param letter (string) Letter to get to degree (power)\r\n     */\r\n    degree = (letter?: string): number => {\r\n        if (this.variables.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (letter === undefined) {\r\n            // Not setLetter given -> we get the global monom degree (sum of all the letters).\r\n            return Object.values(this._literal).reduce((t, n) => t + n);\r\n        } else {\r\n            // A setLetter is given -> get the corresponding power.\r\n            return this._literal[letter] === undefined ? 0 : this._literal[letter];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Evaluate a monom. Each setLetter must be assigned to a Fraction.\r\n     * @param values    Dictionary of <setLetter: Fraction>\r\n     */\r\n    evaluate = (values: { [key: string]: Fraction }): Fraction => {\r\n        let r = this.coefficient.clone();\r\n\r\n        for (let L in this._literal) {\r\n            if (values[L] === undefined) {\r\n                return new Fraction().zero();\r\n            }\r\n            r.multiply(values[L].clone().pow(this._literal[L]));\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Derivative the monom\r\n     * @param letter\r\n     */\r\n    derivative = (letter?: string): Monom => {\r\n        // No setLetter given - assume it's the setLetter 'x'\r\n        if (letter === undefined) {\r\n            letter = 'x';\r\n        }\r\n        if (this.hasLetter(letter)) {\r\n            let d = +this._literal[letter],\r\n                dM = this.clone();\r\n\r\n            // Subtract one to the degree.\r\n            dM._literal[letter] -= 1;\r\n\r\n            // Multiply the coefficient by the previous degree\r\n            dM._coefficient.multiply(new Fraction('' + d));\r\n            return dM;\r\n        } else {\r\n            return new Monom().zero();\r\n        }\r\n    };\r\n\r\n    // ----------------------------------------\r\n    // Static functions\r\n    // ----------------------------------------\r\n\r\n    /**\r\n     * Get the least common multiple of monoms\r\n     * @param monoms    Array of monoms\r\n     */\r\n    static lcm = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom(),\r\n            coeffN: number[] = monoms.map(value => value.coefficient.numerator),\r\n            coeffD: number[] = monoms.map(value => value.coefficient.denominator),\r\n            n = Numeric.gcd(...coeffN),\r\n            d = Numeric.lcm(...coeffD);\r\n\r\n        // Get the coefficient.\r\n        M.coefficient = new Fraction(n, d).reduce();\r\n\r\n        // Set the literal parts - go through each monoms literal parts and get only the lowest degree of each letters.\r\n        for (let m of monoms) {\r\n            // Remove the inexistant letters from the resulting monom\r\n            for (let letter in M.literal) {\r\n                if (!(letter in m.literal)) {\r\n                    M.literal[letter] = 0;\r\n                }\r\n            }\r\n            for (let letter in m.literal) {\r\n                if (M.literal[letter] === undefined && m.literal[letter] > 0) {\r\n                    M.literal[letter] = m.literal[letter];\r\n                } else {\r\n                    M.literal[letter] = Math.min(m.literal[letter], M.literal[letter]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n    /**\r\n     * Multiply two monoms and return a NEW monom.\r\n     * @param M1\r\n     * @param M2\r\n     */\r\n    static xmultiply = (...monoms: Monom[]): Monom => {\r\n        let M = new Monom().one();\r\n\r\n        for (let m of monoms) {\r\n            M.multiply(m);\r\n        }\r\n\r\n        return M;\r\n    };\r\n\r\n\r\n    // TODO: The rest of the functions are not used or unnecessary ?\r\n    /**\r\n     * Determine if multiple monoms are similar\r\n     * @param M\r\n     */\r\n    areSameAs = (...M: Monom[]): boolean => {\r\n        let result: boolean = true;\r\n\r\n        // Check all monoms if they are the isSame as the \"this\" one.\r\n        for (let i = 0; i < M.length; i++) {\r\n            if (!this.isSameAs(M[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All check passed -> all the monoms are similar.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determine if multiple monoms are equals\r\n     * @param M\r\n     */\r\n    areEquals = (...M: Monom[]): boolean => {\r\n        // They are not similar.\r\n        if (!this.areSameAs(...M)) {\r\n            return false;\r\n        }\r\n\r\n        // Check all coefficient. They must be equals.\r\n        for (let m of M) {\r\n            if (!this._coefficient.isEqual(m.coefficient)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // All checks passed.\r\n        return true;\r\n    };\r\n\r\n}","/**\r\n * This class works for 2d line in a plane.\r\n */\r\n\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Point} from \"./point\";\r\nimport {Polynom} from \"../algebra/polynom\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\nexport class Line {\r\n    // A line is defined as the canonical form\r\n    // ax + by + c = 0\r\n    private _a: Fraction;\r\n    private _b: Fraction;\r\n    private _c: Fraction;\r\n    private _OA: Point;\r\n    private _d: Vector;\r\n    private _n: Vector;\r\n    private _exists: boolean\r\n\r\n    constructor(...values: any) {\r\n\r\n        this._exists = false;\r\n\r\n        if (values !== undefined) {\r\n            this.parse(...values);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isLine():boolean {return true;}\r\n    get exists(): boolean {return this._exists; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equation(): Equation {\r\n        return new Equation(new Polynom().parse('xy', this._a, this._b, this._c), new Polynom('0')).simplify();\r\n    }\r\n    get tex(): { canonical: string, mxh: string, parametric: string } {\r\n        // canonical    =>  ax + by + c = 0\r\n        // mxh          =>  y = -a/b x - c/b\r\n        // parametric   =>  (xy) = OA + k*d\r\n\r\n        let canonical = this.equation;\r\n        // Make sur the first item is positive.\r\n        if(this._a.isNegative()){\r\n            canonical.multiply(-1);\r\n        }\r\n\r\n        return {\r\n            canonical: canonical.tex,\r\n            mxh: this.slope.isInfinity() ? 'x=' + this.OA.x.tex : 'y=' + new Polynom().parse('x', this.slope, this.height).tex,\r\n            parametric: `${Point.pmatrix('x', 'y')} = ${Point.pmatrix(this._OA.x, this._OA.y)} + k\\\\cdot ${Point.pmatrix(this._d.x, this._d.y)}`\r\n        }\r\n    }\r\n\r\n    get a(): Fraction {\r\n        return this._a;\r\n    }\r\n\r\n    set a(value: Fraction) {\r\n        this._a = value;\r\n    }\r\n\r\n    get b(): Fraction {\r\n        return this._b;\r\n    }\r\n\r\n    set b(value: Fraction) {\r\n        this._b = value;\r\n    }\r\n\r\n    get c(): Fraction {\r\n        return this._c;\r\n    }\r\n\r\n    set c(value: Fraction) {\r\n        this._c = value;\r\n    }\r\n\r\n    get OA(): Point {\r\n        return this._OA;\r\n    }\r\n\r\n    set OA(value: Point) {\r\n        this._OA = value;\r\n    }\r\n\r\n    get d(): Vector {\r\n        return this._d;\r\n    }\r\n\r\n    get n(): Vector {\r\n        return this._n;\r\n    }\r\n\r\n    get normal(): Vector {\r\n        return new Vector(this._a, this._b);\r\n    }\r\n\r\n    set d(value: Vector) {\r\n        this._d = value;\r\n    }\r\n\r\n    get slope(): Fraction {\r\n        return this._a.clone().opposed().divide(this._b);\r\n    }\r\n\r\n    get height(): Fraction {\r\n        return this._c.clone().opposed().divide(this._b);\r\n    }\r\n\r\n// ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...values: any): Line => {\r\n        this._exists = false;\r\n\r\n        if (values.length === 3) {\r\n            return this.parseByCoefficient(values[0], values[1], values[2]);\r\n        } else if (values.length === 2) {\r\n            if (values[0].isPoint && values[1].isVector) {\r\n                return this.parseByPointAndVector(values[0], values[1]);\r\n            } else if (values[0].isPoint && values[1].isPoint) {\r\n                return this.parseByPointAndVector(values[0], new Vector(values[0], values[1]));\r\n            }\r\n        } else if (values.length === 1){\r\n            // It's a already a line - clone it !\r\n            if(values[0].isLine){\r\n                return values[0].clone();\r\n            }\r\n\r\n            // Maybe it's a string or an equation\r\n            let equ = new Equation(values[0]);\r\n            if(equ.isEquation){\r\n                // Check if it's a valid equation.\r\n                equ.reorder(true)\r\n\r\n                // It must contain either x, y or both.\r\n                let letters = new Set(equ.letters());\r\n\r\n                // No 'x', no 'y' in the equations\r\n                if(!(letters.has('x') || letters.has('y'))){return;}\r\n\r\n                // Another letter in the equation.\r\n                for(let elem of ['x', 'y']){\r\n                    if(letters.has(elem)){\r\n                        letters.delete(elem)}\r\n                }\r\n\r\n                if(letters.size>0){\r\n                    console.log('Extra variable in the equation.')\r\n                    return this;\r\n                }\r\n\r\n                // Everything should be ok now...\r\n                return this.parseByCoefficient(equ.left.monomByLetter('x').coefficient, equ.left.monomByLetter('y').coefficient, equ.left.monomByDegree(0).coefficient)\r\n            }\r\n        }\r\n        // TODO: Add the ability to create line from a normal vector\r\n        console.log('Someting wrong happend while creating the line')\r\n        return this;\r\n    }\r\n\r\n    parseByCoefficient = (a: Fraction, b: Fraction, c: Fraction): Line => {\r\n        this._a = new Fraction(a);\r\n        this._b = new Fraction(b);\r\n        this._c = new Fraction(c);\r\n\r\n        // TODO: initialize direction and reference point\r\n        this._d = new Vector(this._b.clone(), this._a.clone().opposed());\r\n        this._OA = new Point(new Fraction().zero(), this._c.clone());\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    parseByPointAndVector = (P: Point, d: Vector): Line => {\r\n        // OX = OP + k*d\r\n        // x = px + kdx     * dy\r\n        // y = py + kdy     * dx\r\n        // ------------------\r\n        // dy * x = px * dy + kdxdy\r\n        // dx * y = py * dx + kdxdy\r\n        // ------------------\r\n        // dy * x - dx * y = px * dy - py * dx\r\n        // dy * x - dx * y - (px * dy - py * dx) = 0\r\n        this.parseByCoefficient(\r\n            d.y,\r\n            d.x.clone().opposed(),\r\n            P.x.clone().multiply(d.y).subtract(P.y.clone().multiply(d.x)).opposed()\r\n        )\r\n\r\n        // Choose the current values as point and direction vector instead of the automatic version.\r\n        this._OA = P.clone();\r\n        this._d = d.clone();\r\n        this._n = this._d.clone().normal();\r\n\r\n        this._exists = true;\r\n        return this;\r\n    }\r\n\r\n    clone = (): Line => {\r\n        this._a = this._a.clone();\r\n        this._b = this._b.clone();\r\n        this._c = this._c.clone();\r\n\r\n        this._d = this._d.clone();\r\n        this._OA = this._OA.clone();\r\n        this._n = this._n.clone();\r\n\r\n        return this;\r\n    }\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    isParellelTo = (line: Line): Boolean => {\r\n        // Do they have the isSame direction ?\r\n        return this.slope.isEqual(line.slope) && this.height.isDifferent(line.height);\r\n    }\r\n    isSameAs = (line: Line): Boolean => {\r\n        return this.slope.isEqual(line.slope) && this.height.isEqual(line.height);\r\n    }\r\n    simplifyDirection = (): Line => {\r\n        let lcm = Numeric.lcm(this._d.x.denominator, this._d.y.denominator),\r\n            gcd = Numeric.gcd(this._d.x.numerator, this._d.y.numerator);\r\n\r\n        this._d.x.multiply(lcm).divide(gcd);\r\n        this._d.y.multiply(lcm).divide(gcd);\r\n        return this;\r\n    }\r\n    intersection = (line: Line): { point: Point, hasIntersection: boolean, isParallel: boolean, isSame: boolean } => {\r\n        let Pt = new Point(), isParallel = false, isSame = false, hasIntersection = true;\r\n\r\n        // this         => ax+by+c = 0\r\n        // line         => dx+ey+f = 0\r\n        //\r\n        //  aex + bey + ce = 0\r\n        //  dbx + bey + bf = 0\r\n        // (ae-db)x + ce-bf = 0\r\n        //\r\n        //  adx + bdy + cd = 0\r\n        //  adx + aey + af = 0\r\n        // (bd-ae)y + (cd-af)\r\n        //\r\n        // x = (bf-ce)/(ae-db)\r\n        // y = (af-cd)/(bd-ae)\r\n\r\n\r\n        // Theres is no 'y'\r\n        if (this._b.isZero() || line.b.isZero()) {\r\n            // TODO : handle no y in the line canonical form\r\n        }\r\n\r\n        if (this.isParellelTo(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isParallel = true;\r\n        } else if (this.isSameAs(line)) {\r\n            Pt.x = null;\r\n            Pt.y = null;\r\n            isSame = true;\r\n        } else {\r\n            Pt.x = this._b.clone().multiply(line.c).subtract(this._c.clone().multiply(line.b))\r\n                .divide(this._a.clone().multiply(line.b).subtract(this._b.clone().multiply(line.a)));\r\n            Pt.y = this._a.clone().multiply(line.c).subtract(this._c.clone().multiply(line.a))\r\n                .divide(this._b.clone().multiply(line.a).subtract(this._a.clone().multiply(line.b)));\r\n        }\r\n\r\n        return {\r\n            point: Pt,\r\n            hasIntersection: !(isParallel || isSame),\r\n            isParallel,\r\n            isSame\r\n        };\r\n    }\r\n\r\n    distanceTo(pt: Point): { value: number, fraction: Fraction, tex: string } {\r\n        let numerator = pt.x.clone().multiply(this._a)\r\n                .add(pt.y.clone().multiply(this._b))\r\n                .add(this._c).abs(),\r\n            d2 = this.normal.normSquare;\r\n\r\n        // The denominator is null - shouldn't be possible\r\n        if (d2.isZero()) {\r\n            return {\r\n                value: NaN,\r\n                tex: 'Not a line',\r\n                fraction: new Fraction().infinite()\r\n            }\r\n        }\r\n        // The denominator is a perfect square - simplify the tex result\r\n        let value = numerator.value / Math.sqrt(d2.value),\r\n            F = numerator.clone().divide(d2.clone().sqrt());\r\n\r\n        // The denominator is a perfect square.\r\n        if (d2.isSquare()) {\r\n            return {\r\n                value,\r\n                tex: F.tex,\r\n                fraction: F\r\n            }\r\n        }\r\n        // Complete answer...\r\n        return {\r\n            value,\r\n            tex: `\\\\frac{${numerator.tex}}{\\\\sqrt{${d2.tex}}}`,\r\n            fraction: F\r\n        };\r\n    }\r\n\r\n    hitSegment(A: Point, B: Point): boolean {\r\n        let iPt = this.intersection(\r\n            new Line(A, B)\r\n        )\r\n\r\n        // There is an intersection point\r\n        if(iPt.hasIntersection) {\r\n            return iPt.point.x.value >= Math.min(A.x.value, B.x.value)\r\n                && iPt.point.x.value <= Math.max(A.x.value, B.x.value)\r\n                && iPt.point.y.value >= Math.min(A.y.value, B.y.value)\r\n                && iPt.point.y.value <= Math.max(A.y.value, B.y.value)\r\n        }\r\n        return false;\r\n    }\r\n    // ------------------------------------------\r\n    // Special functions\r\n    // ------------------------------------------\r\n    canonicalAsFloatCoefficient(decimals: number): string{\r\n        if(decimals===undefined){\r\n            decimals = 2;\r\n        }\r\n\r\n        let ca = this._a.value,\r\n            cb = this._b.value,\r\n            cc= this._c.value,\r\n            canonical = '';\r\n\r\n        if(!this._a.isZero()){\r\n            if(this._a.isOne()){\r\n                canonical = 'x'\r\n            }else if(this._a.clone().opposed().isOne()){\r\n                canonical = '-x'\r\n            }else{\r\n                canonical = this._a.value.toFixed(decimals)+'x'\r\n            }\r\n        }\r\n\r\n        if(!this._b.isZero()){\r\n            if(this._b.isPositive()){canonical+='+'}\r\n            canonical += this._b.value.toFixed(decimals) + 'y'\r\n        }\r\n\r\n        if(!this._c.isZero()){\r\n            if(this._c.isPositive()){canonical+='+'}\r\n            canonical += this._c.value.toFixed(decimals)\r\n        }\r\n\r\n\r\n        return canonical + '=0';\r\n    }\r\n}","import {Fraction} from \"./maths/coefficients/fraction\";\r\nimport {Numeric} from \"./maths/numeric\";\r\nimport {Nthroot} from \"./maths/coefficients/nthroot\";\r\nimport {Monom} from \"./maths/algebra/monom\";\r\nimport {Polynom} from \"./maths/algebra/polynom\";\r\nimport {Equation} from \"./maths/algebra/equation\";\r\nimport {LinearSystem} from \"./maths/algebra/linearSystem\";\r\nimport {Rational} from \"./maths/algebra/rational\";\r\nimport {Vector} from \"./maths/geometry/vector\";\r\nimport {Line} from \"./maths/geometry/line\";\r\nimport {Point} from \"./maths/geometry/point\";\r\nimport {Triangle} from \"./maths/geometry/triangle\";\r\n\r\n// Expose as global\r\n(<any>window).Pi = {\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n\r\nexport var Pi = {\r\n    Numeric: Numeric,\r\n    Fraction: Fraction,\r\n    Root: Nthroot,\r\n    Monom: Monom,\r\n    Polynom: Polynom,\r\n    Equation: Equation,\r\n    LinearSystem: LinearSystem,\r\n    Rational: Rational,\r\n    Geometry: {\r\n        Vector: Vector,\r\n        Point: Point,\r\n        Line: Line,\r\n        Triangle: Triangle\r\n    }\r\n};\r\n","export class Shutingyard {\r\n    private _rpn: string[] = [];\r\n\r\n    /**\r\n     * Determin if the token is a defined operation\r\n     * Defined operations: + - * / ^ sin cos tan\r\n     * @param token\r\n     */\r\n    isOperation(token: string): boolean {\r\n        if (token[0].match(/[+\\-*/^]/g)) {\r\n            return true;\r\n        }\r\n        if (token.match(/^sin|cos|tan/g)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, string] {\r\n        let tokenMatch: string[], token: string, tokenType: string;\r\n\r\n        // Detect a fraction monoms or return empty array\r\n        tokenMatch = (expr.substr(start).match(/^[0-9/a-z^]+/g)) || [];\r\n\r\n        if (tokenMatch.length > 0) {\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n        }\r\n        // It's an operation !\r\n        else if (expr[start].match(/[+\\-*/^]/g)) {\r\n            token = expr[start];\r\n            tokenType = 'operation';\r\n        }\r\n        // It's an opening parenthese\r\n        else if (expr[start] === '(') {\r\n            token = '(';\r\n            tokenType = '(';\r\n        }\r\n        // It's a closing parenthese\r\n        else if (expr[start] === ')') {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ',';\r\n            tokenType = 'function-argument';\r\n        }\r\n        // It's a (basic) trigonometry function\r\n        else if (expr.match(/^(sin|cos|tan)/g)) {\r\n            token = ')';\r\n            tokenType = ')';\r\n        }\r\n            // TODO: Add other functions !\r\n\r\n        // It's a monom.\r\n        else {\r\n            // TODO: Actually, negative exposant aren't supported.\r\n            // token = (expr.substr(start).match(/^[\\da-z\\^]+/g)[0])||'';\r\n            token = tokenMatch[0];\r\n            tokenType = 'monom';\r\n\r\n            if (token === '') {\r\n                token = expr[start];\r\n                tokenType = 'monom';\r\n                console.log('SHUTING YARD - NEXT TOKEN: error at ', start);\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(token, start + token.length, tokenType);\r\n        return [token, start + token.length, tokenType];\r\n    }\r\n\r\n    /**\r\n     * Sanitize an expression by adding missing common operation (multiplication between parentheseses)\r\n     * @param expr\r\n     * @constructor\r\n     */\r\n    Uniformizer(expr: string): string {\r\n        let expr2;\r\n        // Replace missing multiplication between two parenthese\r\n        expr2 = expr.replace(/\\)\\(/g, ')*(');\r\n\r\n        // Replace missing multiplication between number or setLetter and parenthese.\r\n        expr2 = expr2.replace(/([\\da-z])(\\()/g, \"$1*$2\");\r\n        expr2 = expr2.replace(/(\\))([\\da-z])/g, \"$1*$2\");\r\n\r\n        // TODO: must handle trigonometric or any other function identifier\r\n        return expr2;\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     */\r\n    parse(expr: string): Shutingyard {\r\n        let outQueue: string[] = [],\r\n            opStack: string[] = [],\r\n            precedence: { [Key: string]: number } = {\r\n                '^': 4,\r\n                '*': 3,\r\n                '/': 3,\r\n                '+': 2,\r\n                '-': 2\r\n            },\r\n            associative: { [Key: string]: string } = {\r\n                '^': 'right',\r\n                '*': 'left',\r\n                '/': 'left',\r\n                '+': 'left',\r\n                '-': 'left'\r\n            },\r\n            token: string = '',\r\n            tokenPos: number = 0,\r\n            tokenType: string = '';\r\n\r\n        expr = this.Uniformizer(expr);\r\n\r\n        let securityLoopLvl1 = 50,\r\n            securityLoopLvl2_default = 50,\r\n            securityLoopLvl2;\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--;\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT');\r\n                break;\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos);\r\n\r\n            switch (tokenType) {\r\n                case 'monom':\r\n                    outQueue.push(token);\r\n                    break;\r\n                case 'operation':\r\n                    //If the token is an operator, o1, then:\r\n\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1];\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default;\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop in associative && (\r\n                                //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                                (associative[token] === 'left' && precedence[token] <= precedence[opTop])\r\n                                ||\r\n                                //or o1 is right associative, and has precedence less than that of o2,\r\n                                (associative[token] === 'right' && precedence[token] < precedence[opTop])\r\n                            )\r\n                            ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--;\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT');\r\n                                break;\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push((opStack.pop()) || '');\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            opTop = opStack[opStack.length - 1];\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push(token);\r\n                    break;\r\n                case 'trigo':\r\n                    opStack.push(token);\r\n                    break;\r\n                case 'function-argument':\r\n                    // TODO: check if the opStack exist.\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    while (opStack[opStack.length - 1] !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || '');\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    opStack.push(token);\r\n                    // Add an empty value if next element is negative.\r\n                    // console.log(token, tokenPos, expr[tokenPos], expr[tokenPos+1]);\r\n                    if(expr[tokenPos]==='-') {\r\n                        outQueue.push('0');\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    securityLoopLvl2 = +securityLoopLvl2_default;\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1] !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--;\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESE EXIT');\r\n                            break;\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) || '');\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop();\r\n                    break;\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `);\r\n            }\r\n\r\n            // Output\r\n            // console.log(outQueue.concat(opStack.reverse()).join(\" \"));\r\n        }\r\n\r\n        // console.log(outQueue.concat(opStack.reverse()));\r\n        this._rpn = outQueue.concat(opStack.reverse());\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    // Getter\r\n    get rpn() {\r\n        return this._rpn;\r\n    }\r\n\r\n\r\n}\r\n","import {Fraction} from \"../coefficients/fraction\";\r\nimport {Equation} from \"./equation\";\r\nimport {Numeric} from \"../numeric\";\r\nimport {Monom} from \"./monom\";\r\nimport {Polynom} from \"./polynom\";\r\n\r\n\r\nexport class LinearSystem {\r\n    private _solutions: { [letter: string]: { value: Fraction, isReal: boolean, isVarnothing: boolean } };\r\n    private _resolutionSteps: LinearSystem[];\r\n    private _equations: Equation[];\r\n    private _letters: string[];\r\n\r\n    constructor(...equationStrings: string[]) {\r\n        this._equations = [];\r\n        this._letters = 'xy'.split('');\r\n\r\n        if(equationStrings!==undefined && equationStrings.length>0){\r\n            this.parse(...equationStrings);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    get isLinerarSystem(){return true; }\r\n\r\n    // ------------------------------------------\r\n    // Getter and setter\r\n    // ------------------------------------------\r\n    get equations(): Equation[] {\r\n        return this._equations;\r\n    }\r\n\r\n    set equations(value) {\r\n        this._equations = value;\r\n    }\r\n\r\n    get letters(): string {return this._letters.join('')}\r\n\r\n    set letters(value:string){this._letters = value.split('');}\r\n\r\n    get isSolvable(): boolean {\r\n        let V = this.variables;\r\n\r\n        // TODO: in some case, it is possible to resolve systems if there isn't the isSame number of vars and equations\r\n        if (V.length !== this._equations.length) {\r\n            return false;\r\n        }\r\n\r\n        //TOOD: Must check if two equations isn't a linear combination of the others ?\r\n\r\n        return true;\r\n    }\r\n\r\n    get variables(): string[] {\r\n        let V: string[] = [];\r\n        for (let E of this._equations) {\r\n            V = V.concat(E.variables);\r\n        }\r\n        return [...new Set(V)].sort();\r\n    }\r\n\r\n    get tex(): string {\r\n        // Build the array of values.\r\n        // Reorder\r\n        // This clone the system :!!!\r\n        //TODO: Avoid cloning this linear system\r\n        let LS = this.clone().reorder(),\r\n            letters = LS.variables,\r\n            equStr: string[],\r\n            equArray: string[] = [],\r\n            m: Monom;\r\n\r\n        // TODO: Manage tex output of linear equations\r\n        for (let equ of LS.equations) {\r\n            equStr = [];\r\n            for (let L of letters) {\r\n                m = equ.left.monomByLetter(L);\r\n\r\n                if (equStr.length === 0) {\r\n                    equStr.push(m.isZero() ? '' : m.tex);\r\n                } else {\r\n                    equStr.push(m.isZero() ? '' : ((m.coefficient.sign() === 1) ? '+' : '') + m.tex);\r\n                }\r\n            }\r\n\r\n            // Add the equal sign\r\n            equStr.push('=');\r\n\r\n            // Add the right hand part of the equation (should be only a number, because it has been reorderd)\r\n            equStr.push(equ.right.tex);\r\n\r\n            // Add to the list.\r\n            equArray.push(equStr.join('&'));\r\n        }\r\n\r\n\r\n        return `\\\\left\\\\{\\\\begin{array}{${\"r\".repeat(letters.length)}cl}${equArray.join('\\\\\\\\\\ ')}\\\\end{array}\\\\right.`;\r\n        //return `\\\\left\\\\{\\\\begin{array}{rrrcl}${this._equations.map(equ => `${equ.tex}`).join('\\\\\\\\\\ \\n')}\\\\end{array}\\\\right.`;\r\n    }\r\n\r\n    get texSolution(): string {\r\n        let tex: string[] = [];\r\n\r\n        if (this._solutions === undefined) {\r\n            this.solve();\r\n        }\r\n\r\n        for (let letter in this._solutions) {\r\n            if (this._solutions[letter].isReal) {\r\n                console.log(`Undetermined (letter ${letter})`);\r\n                return;\r\n            }\r\n            if (this._solutions[letter].isVarnothing) {\r\n                console.log(`Undefined (letter ${letter})`);\r\n                return;\r\n            }\r\n\r\n            tex.push(this._solutions[letter].value.dfrac);\r\n        }\r\n        return `(${tex.join(';')})`;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n    parse = (...equations: any[]): LinearSystem => {\r\n        this._equations = equations.map(value => new Equation(value));\r\n        this._findLetters();\r\n        return this;\r\n    };\r\n\r\n    setCoefficient = (...coefficients: string[]): LinearSystem => {\r\n        // Reset the equations list\r\n        this._equations = [];\r\n\r\n        let i = 0;\r\n        while (i < coefficients.length - this._letters.length) {\r\n            let left = new Polynom().parse(this._letters.join(''), ...coefficients.slice(i, i + this._letters.length)),\r\n                right = new Polynom(coefficients[i + this._letters.length].toString()),\r\n                equ = new Equation().create(left, right);\r\n            this._equations.push(equ.clone());\r\n\r\n            i = i + this._letters.length + 1;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    clone = (): LinearSystem => {\r\n        return new LinearSystem().parse(...this._equations.map(equ => equ.clone()));\r\n    };\r\n\r\n    setLetters = (...letters:string[]): LinearSystem => {\r\n        this._letters = letters;\r\n        return this\r\n    }\r\n    private _findLetters = (): LinearSystem => {\r\n        // Find all letters used.\r\n        let variables = new Set();\r\n\r\n        for(let equ of this._equations){\r\n            variables = new Set([...variables, ...equ.variables]);\r\n        }\r\n\r\n        // TODO: How to transform (Set of string) to string[]\r\n        // @ts-ignore\r\n        this._letters = [...variables];\r\n        return this;\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // Equations generators and randomizers\r\n    // -----------------------------------------------\r\n    generate = (...solutions: Fraction[] | number[]): LinearSystem => {\r\n        let solutionsF: Fraction[] = [];\r\n\r\n        // Convert the numbers to fractions if necessary\r\n        for (let s of solutions) {\r\n            if (typeof s === \"number\") {\r\n                solutionsF.push(new Fraction(s.toString()));\r\n            } else {\r\n                solutionsF.push(s.clone());\r\n            }\r\n        }\r\n\r\n        // Create the equations and make sure they are not linear combined.\r\n        this._equations = [];\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            this._equations.push(this._generateOneEquation(...solutionsF));\r\n        }\r\n        return this;\r\n    };\r\n    private _generateOneEquation = (...solutions: Fraction[]): Equation => {\r\n        let coeff: number[] = [], leftValue: Fraction = new Fraction().zero(),\r\n            letters: string[] = ['x', 'y', 'z', 't', 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],\r\n            equString: string = '', equ: Equation;\r\n        for (let i = 0; i < solutions.length; i++) {\r\n            coeff.push(Numeric.randomIntSym(5));\r\n            leftValue.add(solutions[i].clone().multiply(coeff[i]));\r\n            equString += `${(coeff[i] < 0) ? coeff[i] : '+' + coeff[i]}${letters[i]}`\r\n        }\r\n\r\n        // LeftValue contains the left part oof the equation - and is then the isSame as the right part.\r\n        // It might be a Fraction.\r\n\r\n        // Must check if it's not a linear combination\r\n        equ = new Equation(`${equString}=${leftValue.display}`);\r\n        if (equ.right.monoms[0].coefficient.denominator != 1) {\r\n            equ.multiply(new Fraction(equ.right.monoms[0].coefficient.denominator, 1));\r\n        }\r\n        if (this._checkIfLinerCombination(equ)) {\r\n            return equ;\r\n        } else {\r\n            return this._generateOneEquation(...solutions);\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------\r\n    // Mathematical operations\r\n    // ------------------------------------------\r\n    private _linearReduction(eq1: Equation, eq2: Equation, letter: string): Equation {\r\n        // TODO: handle other signs for equations ?\r\n        // Get the monom for the particular letter.\r\n        let c1 = eq1.left.monomByDegree(1, letter).coefficient.clone(),\r\n            c2 = eq2.left.monomByDegree(1, letter).coefficient.clone().opposed();\r\n\r\n        return this.mergeEquations(eq1, eq2, c2, c1);\r\n    }\r\n\r\n    mergeEquations = (eq1: Equation, eq2: Equation, factor1: any, factor2: any):Equation => {\r\n        // Set and clone the equations.\r\n\r\n        let eq1multiplied = eq1.clone().multiply(new Fraction(factor1)),\r\n            eq2multiplied = eq2.clone().multiply(new Fraction(factor2));\r\n\r\n        // Add both equations together.\r\n        eq1multiplied.left.add(eq2multiplied.left);\r\n        eq1multiplied.right.add(eq2multiplied.right);\r\n\r\n        return eq1multiplied;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Solvers algorithm\r\n    // ------------------------------------------\r\n    reorder = (): LinearSystem => {\r\n        for (let E of this._equations) {\r\n            E.reorder();\r\n        }\r\n        return this;\r\n    };\r\n\r\n    solve = (): LinearSystem => {\r\n        // Solve it by linear\r\n        this._solutions = {};\r\n        this._resolutionSteps = [];\r\n\r\n        // Reorder all equations.\r\n        this.reorder();\r\n\r\n        // Get all variables in the linear system\r\n        let V = this.variables.sort();\r\n\r\n        for (let letter of V) {\r\n            this._solutions[letter] = this._solveOneLetter(letter, V)\r\n        }\r\n\r\n        // TODO: LinearSystem - solve: optimization and handle undetermined and undefined systems.\r\n        return this;\r\n    };\r\n\r\n    private _checkIfLinerCombination = (equ: Equation): boolean => {\r\n\r\n        return true;\r\n    };\r\n\r\n    private _solveOneLetter(letter: string, V: string[]): { value: Fraction, isReal: boolean, isVarnothing: boolean } {\r\n        // list of equations.\r\n        let LE: Equation[] = this.clone().equations,\r\n            reducedEquations: Equation[] = [];\r\n\r\n        // Reduce the equations.\r\n        // Do it as long as there is more than one step, but no more than the number of equations.\r\n        for (let L of V) {\r\n            // remove the setLetter from all equations using linear combinations\r\n            if (L === letter) {\r\n                continue;\r\n            }\r\n\r\n            // Linear reduction.\r\n            // TODO: Search for better association\r\n            for (let i = 0; i < LE.length - 1; i++) {\r\n                reducedEquations.push(this._linearReduction(LE[i], LE[i + 1], L));\r\n            }\r\n\r\n            // Keep track of each steps.\r\n            this._resolutionSteps.push(new LinearSystem().parse(...reducedEquations));\r\n\r\n            // Set the list of equations to the new version.\r\n            LE = this._resolutionSteps[this._resolutionSteps.length - 1].clone().equations;\r\n\r\n            // Reset the stack\r\n            reducedEquations = [];\r\n        }\r\n\r\n        // Solve the equations\r\n        let E = this._resolutionSteps[this._resolutionSteps.length - 1].equations[0];\r\n        E.solve();\r\n\r\n        return {\r\n            value: new Fraction(E.solutions[0]),\r\n            isReal: E.isReal,\r\n            isVarnothing: E.isVarnothing\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Helpers\r\n    // ------------------------------------------\r\n    log = (): string => {\r\n        let str: string = '';\r\n\r\n        for (let E of this._equations) {\r\n            console.log(E.tex);\r\n            str += `${E.tex}\\\\n}`;\r\n        }\r\n\r\n        return str;\r\n    };\r\n}","/**\r\n * Polynom module contains everythin necessary to handle polynoms.\r\n * @module Polynom\r\n */\r\n\r\nimport {Polynom} from \"./polynom\";\r\n\r\n/**\r\n * Rational class can handle rational polynoms\r\n */\r\nexport class Rational {\r\n    private _rawString: string;\r\n    private _numerator: Polynom;\r\n    private _denominator: Polynom;\r\n\r\n    /**\r\n     *\r\n     * @param {string} polynomString (optional) Default polynom to parse on class creation\r\n     */\r\n    constructor(numerator?: Polynom, denominator?: Polynom) {\r\n        this._numerator = numerator?numerator.clone():new Polynom();\r\n        this._denominator = denominator?denominator.clone():new Polynom();\r\n    }\r\n\r\n\r\n\r\n\r\n    get tex(): string {\r\n        return `\\\\dfrac{ ${this._numerator.tex} }{ ${this._denominator.tex} }`;\r\n    }\r\n}","import {Point} from \"./point\";\r\nimport {Fraction} from \"../coefficients/fraction\";\r\nimport {Vector} from \"./vector\";\r\nimport {Line} from \"./line\";\r\nimport {Equation} from \"../algebra/equation\";\r\n\r\ninterface remarquableLines {\r\n    'medians': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'mediators': {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line,\r\n        'intersection': Point\r\n    },\r\n    'heights': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    },\r\n    'bisectors': {\r\n        'A': Line,\r\n        'B': Line,\r\n        'C': Line,\r\n        'intersection': Point\r\n    }\r\n}\r\n\r\nexport class Triangle {\r\n    private _A: Point;\r\n    private _B: Point;\r\n    private _C: Point;\r\n    private _lines: {\r\n        'AB': Line,\r\n        'AC': Line,\r\n        'BC': Line\r\n    };\r\n    private _middles: {\r\n        'AB': Point,\r\n        'AC': Point,\r\n        'BC': Point\r\n    };\r\n    private _remarquables: remarquableLines;\r\n\r\n\r\n    constructor(...values: any) {\r\n\r\n        if (values.length > 0) {\r\n            this.parse(...values);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get isTriangle():boolean {return true;}\r\n\r\n    // ------------------------------------------\r\n    // Getter and setters\r\n    // ------------------------------------------\r\n\r\n    get A(): Point {\r\n        return this._A;\r\n    }\r\n\r\n    get B(): Point {\r\n        return this._B;\r\n    }\r\n\r\n    get C(): Point {\r\n        return this._C;\r\n    }\r\n\r\n    get AB(): Vector {\r\n        return this.getSegment('A', 'B');\r\n    }\r\n\r\n    get BA(): Vector {\r\n        return this.getSegment('B', 'A');\r\n    }\r\n\r\n    get BC(): Vector {\r\n        return this.getSegment('B', 'C');\r\n    }\r\n\r\n    get CB(): Vector {\r\n        return this.getSegment('C', 'B');\r\n    }\r\n\r\n    get AC(): Vector {\r\n        return this.getSegment('A', 'C');\r\n    }\r\n\r\n    get CA(): Vector {\r\n        return this.getSegment('C', 'A');\r\n    }\r\n\r\n    get isRectangle(): boolean {\r\n        if (this.AB.isNormalTo(this.BC)) {\r\n            return true;\r\n        }\r\n        if (this.AB.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n        if (this.BC.isNormalTo(this.AC)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get isEquilateral(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) &&\r\n            this.AB.normSquare.isEqual(this.AC.normSquare);\r\n    }\r\n\r\n    get isIsocele(): boolean {\r\n        return this.AB.normSquare.isEqual(this.BC.normSquare) ||\r\n            this.AB.normSquare.isEqual(this.AC.normSquare) ||\r\n            this.BC.normSquare.isEqual(this.AC.normSquare)\r\n    }\r\n\r\n    get lines(): { 'AB': Line, 'BC': Line, 'AC': Line } {\r\n        return this._lines;\r\n    }\r\n\r\n    get remarquables(): remarquableLines {\r\n        return this._remarquables;\r\n    }\r\n\r\n    // ------------------------------------------\r\n    // Creation / parsing functions\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Parse values to a triangle. Supported formats:\r\n     * Point, Point, Point\r\n     * x1, y1, x2, y2, x3, y3\r\n     * TODO: Something else ?\r\n     * @param values\r\n     */\r\n    parse = (...values: any): Triangle => {\r\n        if (values.length === 6) {\r\n            // Check if all values are number or fractions.\r\n            let v = values.map((x: any) => new Fraction(x));\r\n            return this.parse(\r\n                new Point(v[0], v[1]),\r\n                new Point(v[2], v[3]),\r\n                new Point(v[4], v[5]),\r\n            )\r\n        } else if (values.length === 3) {\r\n            // Possibilities:\r\n            // - Three points (or part of points, only dict for example, or array (TODO: Add the array syntax for point)\r\n            // - Three lines\r\n            // - Three lines as text.\r\n            if(values.filter((x:any) => typeof x === 'string').length===3) {\r\n                return this.parse( ...values.map((x:string) => new Line(x)) )\r\n            }else if(values.filter((x:any) => x.isLine === true).length===3) {\r\n                // We have three lines\r\n                this._lines = {\r\n                    'AB': values[0],\r\n                    'BC': values[1],\r\n                    'AC': values[2]\r\n                };\r\n\r\n                // Get the intersection points -> build the triangle using these intersection points.\r\n                let intersect = values[0].intersection(values[1]);\r\n                if (intersect.hasIntersection) {\r\n                    this._B = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[1].intersection(values[2]);\r\n                if (intersect.hasIntersection) {\r\n                    this._C = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n                intersect = values[2].intersection(values[0]);\r\n                if (intersect.hasIntersection) {\r\n                    this._A = intersect.point.clone();\r\n                } else {\r\n                    return this;\r\n                }\r\n            }else {\r\n                // At least, one of the value is not a point.\r\n                if (values.filter((x: any) => x.isPoint === true).length < 3) {\r\n                    return this.parse(\r\n                        new Point(values[0]),\r\n                        new Point(values[1]),\r\n                        new Point(values[2])\r\n                    )\r\n                }\r\n\r\n                // We have three points.\r\n                this._A = values[0].clone();\r\n                this._B = values[1].clone();\r\n                this._C = values[2].clone();\r\n\r\n                this._lines = {\r\n                    'AB': new Line(this._A, this._B),\r\n                    'BC': new Line(this._B, this._C),\r\n                    'AC': new Line(this._A, this._C)\r\n                };\r\n            }\r\n        } else if (values.length === 1) {\r\n            if (values[0].isTriangle === true) {\r\n                return values[0].clone();\r\n            }\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the Triangle class\r\n     */\r\n    clone = (): Triangle => {\r\n        this._A = this._A.clone();\r\n        this._B = this._B.clone();\r\n        this._C = this._C.clone();\r\n\r\n        this._lines = {\r\n            'AB': this._lines.AB.clone(),\r\n            'BC': this._lines.BC.clone(),\r\n            'AC': this._lines.AC.clone()\r\n        }\r\n\r\n        this._updateTriangle();\r\n        return this;\r\n    }\r\n\r\n\r\n    // ------------------------------------------\r\n    // Triangle operations and properties\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * Generate the Line object for the three segments of the triangle\r\n     */\r\n    private _updateTriangle = () => {\r\n        this._middles = {\r\n            'AB': new Point().middleOf(this._A, this._B),\r\n            'AC': new Point().middleOf(this._A, this._C),\r\n            'BC': new Point().middleOf(this._B, this._C)\r\n        }\r\n\r\n        this._remarquables = this._calculateRemarquableLines();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the Point class for the given name\r\n     * @param ptName\r\n     */\r\n    private getPointByName = (ptName: string): Point => {\r\n        switch (ptName.toUpperCase()) {\r\n            case 'A':\r\n                return this._A;\r\n            case 'B':\r\n                return this._B;\r\n            case 'C':\r\n                return this._C;\r\n        }\r\n\r\n        // Something went wrong ! Return the first point\r\n        return this._A;\r\n    }\r\n    /**\r\n     * Get the vector for the segment given by name.\r\n     * @param ptName1\r\n     * @param ptName2\r\n     */\r\n    private getSegment = (ptName1: string, ptName2: string): Vector => {\r\n        return new Vector(\r\n            this.getPointByName(ptName1),\r\n            this.getPointByName(ptName2)\r\n        );\r\n    }\r\n\r\n    private _calculateRemarquableLines = (): remarquableLines => {\r\n        let remarquables: remarquableLines = {\r\n            'medians': {\r\n                'A': new Line(this._A, this._middles.BC),\r\n                'B': new Line(this._B, this._middles.AC),\r\n                'C': new Line(this._C, this._middles.AB),\r\n                'intersection': null\r\n            },\r\n            'mediators': {\r\n                'AB': new Line(this._middles.AB, new Vector(this._A, this._B).normal()),\r\n                'AC': new Line(this._middles.AC, new Vector(this._A, this._C).normal()),\r\n                'BC': new Line(this._middles.BC, new Vector(this._B, this._C).normal()),\r\n                'intersection': null\r\n            },\r\n            'heights': {\r\n                'A': new Line(this._A, new Vector(this._B, this._C).normal()),\r\n                'B': new Line(this._B, new Vector(this._A, this._C).normal()),\r\n                'C': new Line(this._C, new Vector(this._A, this._B).normal()),\r\n                'intersection': null\r\n            },\r\n            'bisectors': {\r\n                'A': this._calculateBisectors('A'),\r\n                'B': this._calculateBisectors('B'),\r\n                'C': this._calculateBisectors('C'),\r\n                'intersection': null\r\n            }\r\n        }\r\n\r\n        // As it's a triangle, we assume the lines are intersecting and aren't parallel or superposed.\r\n        remarquables.medians.intersection = remarquables.medians.A.intersection(remarquables.medians.B).point;\r\n        remarquables.mediators.intersection = remarquables.mediators.AB.intersection(remarquables.mediators.BC).point;\r\n        remarquables.heights.intersection = remarquables.heights.A.intersection(remarquables.heights.B).point;\r\n        remarquables.bisectors.intersection = remarquables.bisectors.A.intersection(remarquables.bisectors.B).point;\r\n\r\n        // Everything was calculated for the remarquable lines.\r\n        return remarquables;\r\n    }\r\n\r\n    private _calculateBisectors = (pt: string): Line => {\r\n        let tlines = this.lines, d1, d2;\r\n\r\n        if(pt==='A'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.AC;\r\n        }else if(pt==='B'){\r\n            d1 = tlines.AB;\r\n            d2 = tlines.BC;\r\n        }else if(pt==='C'){\r\n            d1 = tlines.BC;\r\n            d2 = tlines.AC;\r\n        }\r\n\r\n        let b1 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm)).reorder(true).simplify()),\r\n            b2 = new Line(new Equation(d1.equation.left.clone().multiply(d2.n.simplify().norm), d2.equation.left.clone().multiply(d1.n.simplify().norm).opposed()).reorder(true).simplify());\r\n\r\n        // Must determine which bisectors is in the triangle\r\n        if(pt==='A'){\r\n            return b1.hitSegment(this.B, this.C)?b1:b2;\r\n        }\r\n        if(pt==='B'){\r\n            return b1.hitSegment(this.A, this.C)?b1:b2;\r\n        }\r\n        if(pt==='C'){\r\n            return b1.hitSegment(this.B, this.A)?b1:b2;\r\n        }\r\n\r\n        // Default returns the first bisector\r\n        return b1;\r\n    }\r\n}"],"sourceRoot":""}